;MIT Open License
;
;Copyright (c) 2012 Sasha Crofter

;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
;
;
SET PC, __BOOT
;;;;;;;
; ENV ;
;;;;;;;
:env.cwds DAT 0
:env.fs DAT 0
:env.heap DAT 0
 ;;
;;;;;;;;
; BOOT ;
;;;;;;;;
;:# BOOT Loader
;:Initializes the kernel on startup
;:

;:### __BOOT
;:Invokes the boot loader
;:
;:1. Invoke *sv.init* to mount the screen at *videoRAM*.
;:2. Invoke *cat.mountSystem* to initialize the file system with arguments `0x8000, 0x810, 128`.
;:3. Invoke *p.init* to initialize the Dash Package Handler
;:4. Invoke *s.instance* to intialize the DASH Shell
;:
:__BOOT
JSR HWM

SET A, 0
SET B, 6
HWI [HW.GenericClock]

SET A, videoRAM
SET B, fontRAM
JSR sv.init ;set up boot screen and screen

SET A, 0x2000 ;heap location
SET B, 0x1000 ;length
SET C, 0x0100 ;block size (16 blocks)
JSR heap.init

;SHOULD SET VARIABLES TO LOCATION OF HEAP HEADER

JSR pih.init

SET A, 0x8000
SET B, 0x810
SET C, 128

JSR cat.mountSystem ;initialize FS

JSR p.init ;initialize DPH

SET A, 1
:__BOOT.bootscreenDisplayLoop
HWI [HW.GenericClock]
IFL C, 15
  SET PC, __BOOT.bootscreenDisplayLoop

JSR s.instance ;initialize DASH Shell

SET PC, halt

:pTitle DAT 0x7563, 0x6562, 0x534f

:halt SUB PC, 1
 ;
 
;:### SYSTEM.RESTART
;:Clears all registers, drops interrupt queue
;:**under development**
;:
:SYSTEM.RESTART
SET A, 0
SET B, 0
SET C, 0
SET X, 0
SET Y, 0
SET Z, 0
SET I, 0
SET J, 0
SET SP, 0
IAS 0
SET PC, 0


;:### ext
;:Exits a subroutine with A set to 0 (`TRUE`)
;:To use, do `SET PC, ext` instead of `SET PC, POP` at the end of a subroutine
;:
:ext ; exit true
SET A, 0
SET PC, POP
 ;

;:### exf
;:Exits a subroutine with A set to 1 (`FALSE`)
;:To use, do `SET PC, exf` instead of `SET PC, POP` at the end of a subroutine
;:
:exf ; exit false
SET A, 1
SET PC, POP
 ;
 ;;
 
;;;;;;;;;;;;;;;;
; DASH ; Shell ;
;;;;;;;;;;;;;;;;
;:The DASH Shell is essential to cubeOS's function. It acts as an interpreter for ASCII commands, <strike>which are passed to the package manager in order to directly execute subroutines,</strike> and also handles keyboard input.
;:
;:## Usage
;:At the prompt, which is of the form "*CWD*$", the user can use an attached Generic Keyboard to input ASCII and control characters. 
;:
;:## Control Characters
;:
;:### Control + Delete
;:Restarts the DASH Shell by calling *s.instance*.
;:
;:## Subroutines

:v.sPrompt DAT 0x2024
:v.promptLoc DAT 0

:v.stdin DAT s.stdin.space
:v.stdout DAT s.stdout.space

:v.cmdmem DAT 1 ;used in stupid way of "hashing" input
;SHOULD USE FOR HASH INSTEAD, BUT ONLY IF NECESSARY

;:### s.instance
;:Prepares a new terminal session at the root directory.
;:
;:1. Set *env.cwds* to "/ " in packed form (`0x202F`)
;:2. Clears the screen
;:3. Calls *s.takeIn*
;:4. Calls *s.parse*
;:5. Calls *s.stdout* with the argument being the cursor location when the user pressed enter
;:6. Loops nonendingly to 3
;:
:s.instance ;SHOULD PREPARE STDIN and STDOUT
SET [env.cwds], 0x202F
JSR sv.clear ;clear the screen
SET A, [v.scrnLoc]

:s.instance.promptLoop
JSR s.takeIn
SET PUSH, A ;keep track of cursor location

JSR s.parse

SET A, POP ;restore cursor location for passing to s.stdout
JSR s.stdout

SET PC, s.instance.promptLoop

SET PC, POP
 ;
 
;:### s.takeIn (cursorPointer)
;:Writes a prompt to the screen using *v.sPrompt* and enters a loop to take ASCII input from the keyboard and write it to the screen at *cursorPointer*. It exits when the user presses `enter`.
;:
;:**returns** the cursor location on exit
;:
:s.takeIn
SET PUSH, I
SET I, 0

JSR sv.getNewLine ;get the next blank line after *cursorPointer*
JSR s.drawPrompt ;draw the prompt using s.drawPrompt

SET A, 1 ;HWI parameter

:s.takeIn.loop
IFL I, [v.promptLoc]
  SET I, [v.promptLoc]
SET [I], 0xf09e ;cursor character

:s.takeIn.wait
HWI [HW.GenericKeyboard]

IFG C, 0x1f
  IFL C, 0x80
    SET PC, s.takeIn.write

IFE C, 0x10
  SET PC, s.takeIn.backspace

IFE C, 0x11
  SET PC, s.takeIn.enter
  
;INSERT (0x12)
  
IFE C, 0x13
  SET PC, s.takeIn.delete
  
SET PC, s.takeIn.wait


:s.takeIn.write
XOR C, 0xF000
STI [I], C

IFN I, [v.scrnEnd] ;write normally
  SET PC, s.takeIn.loop

:s.takeIn.write.scroll
SUB [v.promptLoc], [v.scrnWidth] ;make prompt scroll, too
JSR sv.scrollUp ;scroll everything up
SET PC, s.takeIn.loop


:s.takeIn.backspace
STD [I], 0
SET [I], 0
SET PC, s.takeIn.loop
 ;

:s.takeIn.delete
SET A, 2 ;changes interrupt action, so must be reset afterward
SET B, 0x91 ;sets B to the *Control* key
HWI [HW.GenericKeyboard] ;C becomes 1 if *Control* is pressed

IFE C, 1 ;exit if 
  SET PC, s.instance

SET A, 1 ;reset interrupt action
SET PC, s.takeIn.loop
 ;

:s.takeIn.enter
SET [I], 0
SET A, [v.promptLoc]
SET B, I ;UNNECESSARY ASSIGNMENT OF CURSOR POSITION
JSR s.stdin

SET A, I;return location in A
SET I, POP
SET PC, POP
 ;

;:### s.parse
;:It's not worth documenting this spaghetti code. It will be completely rewritten when *package* works.
;:
:s.parse
SET A, [v.stdin]
SET B, A

:s.parse.getFirstArg
IFC [B], 0x20 ;if [B] is 0x0000 or 0x0020
  SET PC, s.parse.exit
ADD B, 1
SET PC, s.parse.getFirstArg

:s.parse.exit
SUB B, A ;make B the length of the first argument
JSR crp.dsHash ;returns the hashvalue in A

JSR p.lookup

;MAYBE SET B AND C TO 0?

SET PC, A ;calls the subroutine returned by *p.lookup*
 ;

;:### s.drawPrompt (pointer)
;:Draws a prompt using *env.cwds* and *v.sPrompt* at *pointer* and sets *v.promptLoc* to the location following the prompt.
;:
;:**returns** the location following the prompt
;:
:s.drawPrompt

SET C, A
SET A, env.cwds
SET B, 1
JSR typ.pUnpack

SET C, A
SET A, v.sPrompt
SET B, 1
JSR typ.pUnpack

SET [v.promptLoc], A

SET PC, POP
 ;

;:### s.stdin (startPointer)
;:Performs a C-style copy from *startPointer* to *v.stdin*, replacing un-(single)quoted spaces with zeros.
;:
:s.stdin
SET PUSH, I
SET I, A
SET B, [v.stdin]

:s.stdin.loop
STI [B], [I]
AND [B], 0x007F

IFE [B], 0x27 ;single quote
  XOR [s.stdin.quoteflag], 1 ;flip state
  
IFN [s.stdin.quoteflag], 1 ;unless they're quoted
  IFE [B], 0x20 ;set spaces
    JSR s.stdin.newarg

ADD B, 1

IFN [I], 0
  SET PC, s.stdin.loop

SET [B], 0
SET I, POP
SET PC, POP

:s.stdin.newarg
SET [B], 0
;ADD A POINTER TO THE ARGUMENT TO s.stdin.args
SET PC, POP


:s.stdin.quoteflag DAT 0 ;is 1 if iterator is inside quotes
;:s.stdin.escflag DAT 0 ;is 1 if "\" was the most recent character

;:s.stdin.args ;for handling arguments
;DAT 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0
 ;

;:### s.stdout (outputPointer)
;:Does a C-style copy from *v.stdout* to *outputPointer*.
:s.stdout
JSR sv.getNewLine

SET B, A ;output
SET A, [v.stdout] ;input
SET PC, sv.write ;process to screen (null-terminated)
 ;
;;RESERVED SPACE
:s.stdin.space
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
:s.stdout.space
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CAT ; CAT FileSystem         ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# CAT
;:**CAT** is the default file system for cubeOS. It is based on the [Harry's Allocation Table](https://github.com/0x10cStandardsCommittee/0x10c-Standards/blob/master/FS/Draft_Harrys_Allocation_Table.txt) file system format. cubeOS uses hashes to identify links, in addition to fourteen character strings.
;:
;:**requires**
;:
;:- crypt
;:
;:**STILL UNDER HEAVY DEVELOPMENT. DO NOT USE**

:cat.def.curDir DAT ".", 0 ;stock current directory name
:cat.def.parDir DAT "..", 0 ;stock parent directory name

;:## High-level Commands
;:The high-level commands provide a smooth interface with the filesystem that can be used easily by modules and the rest of the operating system.
;:



;:## Low-level Commands
;:The low-level commands are used by the high level commands to provide fast and efficient access to the framework of the filesystem itself.
;:

;:### cat.mountSystem (location, length, sectorSize)
;:Mounts */* directory at *location*, reserving *length* words after it. It then initializes a cat filesystem with the given *sectorSize*.
;:
;:Currently unsafe if the number of sectors is greater than 16
;:**returns** location of first word in header
;:

;SHOULD KEEP TRACK OF WHERE FILESYSTEM IS SO IT CAN ADD NEW STRIPS AND DO SEARCHES

:cat.mountSystem
SET [env.fs], A

SET PUSH, I
SET PUSH, J
SET PUSH, X
SET PUSH, A ;store location for retrieval at the end
SET I, A
DIV B, C ;make B the maximum number of sectors ;SHOULD 

;should find the maximum number of sectors, but doesn't

:cat.mountSystem.initHeader
STI [I], 0xC001 ;magic number, cat v1.0
STI [I], B ;number of sectors
STI [I], 0 ;reserved for sector map start
STI [I], 0 ;reserved for sector joins start
STI [I], 0 ;reserved for sector start
STI [I], C ;sector size
STI [I], 0 ;sectors in use

:cat.mountSystem.initSectorMap
SET [A+2], I ;sector map start
SET PUSH, B ;store B
SET C, B ;we will change B later
DIV C, 16 ;find number of words needed to represent sector use states
;OPTIMIZE DIV WITH SHR
ADD C, I ;C becomes sector map end location

:cat.mountSystem.initSectorMap.loop
SET X, 0xFFFF ;make X initializer for sector map
SHR X, B ;set only the excess bits to used
STI [I], X

IFG X, 0 ;exit if that was enough bits to represent all sectors
  SET PC, cat.mountSystem.initSectorMap.end

SUB B, 16
SET PC, cat.mountSystem.initSectorMap.loop ;COULD BE REORDERED MORE EFFICIENTLY

:cat.mountSystem.initSectorMap.end
SET B, POP ;restore number of sectors

:cat.mountSystem.initSectorJoin
SET [A+3], I ;sector join start
ADD B, I ;make B the ending location of sector join

:cat.mountSystem.initSectorJoin.loop
STI [I], 0
IFN I, B ;continue reserving until I reaches the end location
  SET PC, cat.mountSystem.initSectorJoin.loop

:cat.mountSystem.initSectors
SET [A+4], I

:cat.mountSystem.initializeRoot
SET A, 0
SET B, 1
JSR cat.newInode

SET A, 0
SET B, 0
SET C, cat.def.curDir
JSR cat.newLink

SET A, 0
SET B, 1
SET C, temp.cat.directoryName
JSR cat.newLink

SET A, 1
SET B, 2
JSR cat.newInode

SET PC, cat.mountSystem.exit

:temp.cat.directoryName DAT "test"
:temp.cat.fileContent DAT "This is a test."

:cat.mountSystem.exit
SET A, POP ;return location

SET X, POP
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### cat.getOpenSector ()
;:Finds the first open sector in the filesystem
;:**modifies** A
;:**returns** sector number
;:
:cat.getOpenSector
SET PUSH, B
SET PUSH, C
SET PUSH, I

SET A, [env.fs]
SET B, [A+2] ;starting location
SET C, [A+3] ;ending location

:cat.getOpenSector.wordloop
SET A, [C]

;CHECK THROUGH AND FIND THE FIRST OPEN SECTOR

SET I, POP
SET C, POP
SET B, POP

;:### cat.getSectorPointer (sector)
;:**modifies** A
;:**returns** a pointer to the location of the given sector in memory
;:
:cat.getSectorPointer
SET PUSH, B
SET B, [env.fs]
MUL A, [B+5] ;multiply by sector size
ADD A, [B+4] ;add sector offset
SET B, POP
SET PC, POP
 ;

;:### cat.getInodePointer (inodeNumber)
;:Obeys sector links to find pointer to inode.
;:**returns** pointer to the location of the given inode in memory
;:**UNDER DEVELOPMENT**
;:
:cat.getInodePointer
SET PUSH, I

SET B, [env.fs+3] ;make B a pointer to the sector joins start


;:### cat.newInode (sector, type)
;:Creates a new inode of *type* and length 0 at *sector*. It also marks the corresponding sector in sector map as used.
;:Types are 0, for unused, 1, for directory, and 2, for file.
;:**modifies** A, B
;:**returns** sector of inode

:cat.newInode
SET PUSH, A ;store A for returning
JSR cat.getSectorPointer ;make A a pointer to the start of that sector

SET [A], B
SET [A+1], 0 ;the number of links pointing to the inode
SET [A+2], 0 ;the number content size
SET [A+3], 0 ;reserved

SET A, POP
SET PC, POP
 ;

;:### cat.newLink (sector, targetSector, namePointer)
;:Creates a new link under the given sector, extending the length of the inode automatically <strike>and overflowing to the next open sector (updating sector usage and linking) if necessary</strike>.
;:The first word is the *targetSector*, and the remaining fifteen words are copied literally <strike>(maximum length fourteen)</strike> from the null-terminated word at *namePointer*.
;:**returns** 0 if successful, and 1 if the given sector does not contain a directory
;:
:cat.newLink
JSR cat.getSectorPointer ;get the memory location 

IFN [A], 1 ;if the sector does not contain a directory
  SET PC, exf ;exit false

SET PUSH, A ;store A for later

ADD A, [A+2] ;add the length of the existing links
ADD A, 4 ;add the length of the inode
;SHOULD CHECK TO SEE IF IT IS OUT OF BOUNDS OF THE SECTOR; IF SO, IT MUST CONTINUE ON TO EITHER THE LINKED SECTOR OR LINK ANOTHER

SET [A], B ;set the link target
ADD A, 1
SET B, C

JSR typ.cCopy ;SHOULD IMPOSE MAXIMUM LENGTH

SET A, POP
ADD [A+2], 16 ;add the length of the link (always 16) to the length of the inode
SET PC, ext ;exit successful
 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CRYPT ; Cryptography Lib ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;:# Crypt
;:Cryptography Library
;:

;:##crp.dsHash (inputPointer, inputLength)
;:Reads data of *inputLength* from *inputPointer* and performs a hash function on it.
;:**returns** the 16-bit hash
;:
;:For every value, shift the word *i* left and BOR with EX. XOR all of the resulting values together to produce the hash.
;:```python
;:for i in inputLength:
;:	output ^ (inputPointer[i] << i)
;:```
;:

:crp.dsHash
SET PUSH, I
SET PUSH, J
SET I, A
SET J, 0

SET A, 0
ADD B, I ;B becomes the exit location

:crp.dsHash.loop
SET C, [I]
SHL C, J
BOR C, EX
XOR A, C

STI C, 0 ;efficient I and J increment
IFL I, B
  SET PC, crp.dsHash.loop

SET J, POP
SET I, POP
SET PC, POP
 ;
;RETURNS INCORRECT VALUE IF DOING HASHGET ON AN UNPRESENT VALUE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DATALIB ; Data Managing Library ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:DataLib is a library for managing arbitrary amounts of data with relative speed and efficiency.
;:

;:## Hash Table
;:Subroutines for creating and searching hash tables, which are sorted tables that store values under names
;:

;:### dl.makeHashTable (headerPointer, indicies, startingLength)
;:Creates the header for a hashTable at *headerPointer* with *indicies* as the target number of indicies for the hashTable. The total length of the hashTable is `2 * indicies + 4`, which includes the header, the lookup portion of the table, and the value portion of the table. *length* is not the total length of the table, but rather the number of occupied indicies.
;:**returns** *headerPointer*
;:
:dl.makeHashTable
SET [A], 0x5468 ;"hT" magic number
SET [A+1], B ;indicies
SET [A+2], C ;length
SET [A+3], 0 ;reserved
SET PC, POP
 ;

;:### dl.hashGet (searchTerm, hashTablePointer)
;:Searches the hash table at *hashTablePointer* for *searchTerm* in the lookup portion of it. It returns the value in the value portion associated with the searchTerm.
;:
;:**returns** value associated by the hash table with *searchTerm*, or 1 if it could not be found
;:**development version** 
;:
:dl.hashGet
SET PUSH, [B+1] ;store the number of indicies

SET C, [B+2] ;length
ADD B, 4 ;location
JSR dl.searchValTable

IFE A, 1
  SET PC, dl.hashGet.exf

ADD A, POP ;make A an index in the value table
SET A, [A] ;return the value, rather than the index
SET PC, POP

:dl.hashGet.exf
;A is 1
SET B, POP
SET PC, POP
 ;

;:### dl.hashInsert (lookupValue, insertValue, hashTablePointer)
;:Inserts *lookupValue* in a sorted way in the lookup portion of the hashTable at *hashTablePointer* and *insertValue* in an unsorted way at the same index in the value portion of the table. This is designed to work very well with the 16-bit hashing algorithm crp.dsHash.
;:
;:**under development**
;:
:dl.hashInsert
SET PUSH, B ;store *insertValue*
SET PUSH, [C+1] ;store *indicies* from header
SET PUSH, C ;store pointer to header

SET B, C
ADD B, 4 ;start of sortedTable (for lookups)
SET C, [C+2] ;length of sortedTable

JSR dl.sortedInsert

SET C, POP
ADD [C+2], 1 ;add one to the length

ADD A, POP ;retrieve *indicies* from stack

SET B, A
SET A, POP ;retrieve *insertValue* from stack

SET PC, dl.unsortedInsert
 ;

;:## Sorted Table
;:Subroutines for creating and searching sorted tables
;:

;:### dl.sortedInsert (insertValue, tableLocation, tableLength)
;:Inserts *insertValue* into the sorted table at *tableLocation* of *tableLength*, maintaining the sortedness of the table.
;:
;:**returns** location of insert<strike>, or 1 if the value is already present in the table</strike>
;:
:dl.sortedInsert
SET PUSH, A
JSR dl.findInsertIndex

;NEED TO HANDLE DUPLICATE ENTRY

SET B, A
SET A, POP
SET PC, dl.unsortedInsert ;exit when this subroutine exits
 ;

;:### dl.searchValTable (searchTerm, tableLocation, tableLength)
;:Performs a binary search on the table at *tableLocation* (with length *tableLength*) for *searchTerm* and returns the memory location
;:
:dl.searchValTable
IFE C, 0 ;if *tableLength* is zero, return the tableLocation
  SET PC, dl.searchValTable.noLength

IFE C, 1
  SET PC, dl.searchValTable.lengthOne

SET PUSH, I

:dl.searchValTable.recheck
SET I, C
SHR I, 1 ;divide by 2
ADD I, B

IFE [I], A
SET PC, dl.searchValTable.found

IFE C, 1
  SET PC, dl.searchValTable.exf

IFG A, [I]
  SET PC, dl.searchValTable.toolow

IFL A, [I]
  SET PC, dl.searchValTable.toohigh

SET PC, dl.searchValTable.recheck

:dl.searchValTable.toohigh
SET C, I
SUB C, B
SET PC, dl.searchValTable.recheck

:dl.searchValTable.toolow
ADD C, B
SUB C, I
SET B, I
SET PC, dl.searchValTable.recheck

:dl.searchValTable.found
SET A, I
SET I, POP
SET PC, POP

:dl.searchValTable.noLength
SET A, B
SET PC, POP

:dl.searchValTable.lengthOne
IFG A, [B] ;if *insertValue* is greater than the existing value
  ADD B, 1 ;look at the second value

SET A, B ;return B
SET PC, POP

:dl.searchValTable.exf
SET A, 1
SET I, POP
SET PC, POP
 ;

;:### dl.findInsertIndex (searchTerm, tableLocation, tableLength)
;:Returns the index at which *searchTerm* should be inserted to keep the table at *tableLocation* with length *tableLength* sorted.
;:
:dl.findInsertIndex
JSR dl.searchValTable

IFE A, 1 ;if the value isn't there
  ADD A, B ;add B to make it the index to insert at

;DO SOMETHING IF A != 1 AND LENGTH ISN'T LOW
  
SET PC, POP
 ;
 
;:### dl.unsortedInsert (insertValue, insertLocation)
;:Inserts *insertValue* at *insertLocation* and pushes the value it would replace upward in memory recursively until only a null is overwritten.
;:**returns** *insertLocation*
;:
:dl.unsortedInsert
SET PUSH, I
SET PUSH, X ;SHOULD JUST USE A
SET PUSH, Y ;SHOULD JUST USE B

SET PUSH, B
SET I, B
SET X, A

:dl.unsortedInsert.loop
IFE X, 0
  SET PC, dl.unsortedInsert.exit
SET Y, [I]
STI [I], X
SET X, Y

SET PC, dl.unsortedInsert.loop

:dl.unsortedInsert.exit
SET A, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;
 ;;
 

:screendata
:ht dat 0,0,0,0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HWMAN ; Hardware Manager ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;:The Hardware Manager is designed to be run to place a layer of abstraction between the software and connected hardware. HWM detects known hardware and maps their port numbers to memory locations, which are accessible through labels.
;:For example, to send a hardware interrupt to a connected LEM1802, one might normally use the command `HWI 0`, or `HWI 1`. This might change between emulators and ingame, however. HWM allows such syntax as `HWI [LEM1802]`.
;:
;:## Supported Hardware
;:*Items marked with an asterisk do not have intialization routines called automatically.
;:- *[Generic Clock](http://dcpu.com/highnerd/rc_1/clock.txt)
:HW.GenericClock DAT 0
;:- *[LEM1802](http://dcpu.com/highnerd/rc_1/lem1802.txt)
:HW.LEM1802 DAT 0
;:
:HW.GenericKeyboard DAT 0
;:
;:## Subroutines
;:

;:### HWM
;:Maps the ports of all recognized hardware to specific points in memory, which are accessible through labels. Upon recognizing a piece of hardware, it will map it to a memory location and do an automatic `JSR` to a label of the form `HWinit.x`, where *x* is the name of the hardware recognized in either full form (`HWinit.LEM1802`) or definition camel case (`HWinit.GenericClock`) if the name of the hardware cannot be represented by labels in its full form.
;:
:HWM
JSR pushReg

HWN I ;I is the number of attached devices
SET J, 0 ;J will be the iterator

:HWM.loop
HWQ J

IFE A, 0xf615
  IFE B, 0x7349
    SET [HW.LEM1802], J

IFE A, 0xb402
  IFE B, 0x12d0
    SET [HW.GenericClock], J
    
IFE A, 0x7406
  IFE B, 0x30cf
    SET [HW.GenericKeyboard], J

ADD J, 1

IFN I, J
  SET PC, HWM.loop
  
SET PC, popReg
 ;
 
;:### HWF.LEM1802
;:Finds the LEM1802 in as few cycles as possible and sets the memory location at the label *LEM1802* to its port number without mapping other hardware. This is intended to be run at boottime in order to quickly start the monitor and display a boot screen.
;:**Under development**
;:

;:### pushReg
;:Pushes all registers to the stack.
;:
:pushReg
SET [pushReg.ReturnLocation], POP
SET PUSH, A
SET PUSH, B
SET PUSH, C
SET PUSH, X
SET PUSH, Y
SET PUSH, Z
SET PUSH, I
SET PUSH, J
SET PC, [pushReg.ReturnLocation]
:pushReg.ReturnLocation DAT 0 ;needed in order to return after pushing values
 ;

;:### popReg
;:Pops all registers from the stack, then pops PC from the stack. **This must be called by `SET PC, popReg`.** Otherwise, the registers will be popped incorrectly.
;:
:popReg
SET J, POP
SET I, POP
SET Z, POP
SET Y, POP
SET X, POP
SET C, POP
SET B, POP
SET A, POP
SET PC, POP
 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HEAPMAN ; Heap Manager   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# Heap Manager
;:

;:### heap.init
;:(location, length, blocksize)
;:heap.init reserves a 4 word header followed by a bit map of all blocks. The size of the bit map is (*maxlength*/*blocksize*)/16. *length* is actually the length of the heap, excluding the header and bit map.
;:
;:The header consists of a magic word, **0x9ea9**, the location of the first block in memory, the size of each block, and the maximum length of the heap.
;:
;:**This subroutine clears all of the space given to it.**
;:
;:**returns** location of header
;:

:heap.init
SET PUSH, I
SET PUSH, J
SET PUSH, X

SET [env.heap], A

SET I, A
SET PUSH, A
SET A, B

DIV A, C
SET X, A ;store the number of blocks
DIV A, 16 ;OPTIMIZE WITH SHR

ADD A, PEEK
ADD A, 4 ;make A the location of the start of the first block

STI [I], 0x9EA9	;0
STI [I], A
STI [I], C
STI [I], B

SET PUSH, B
SET PUSH, A

:heap.init.map
SET A, 0xFFFF
SHR A, X
STI [I], A

IFL X, 16
  SET PC, heap.init.map.exit

SUB X, 16
IFN X, 0
  SET PC, heap.init.map

:heap.init.map.exit

SET A, POP
SET I, A
ADD I, POP ;create ending location

:heap.init.loop ;clear backwards
IFE I, A
  SET PC, heap.init.exit
STD [I], 0
SET PC, heap.init.loop

:heap.init.exit
SET A, POP
SET X, POP
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### heap.alloc (length)
;:Reserves the first consecutive *length* of memory in the heap.
;:
;:**returns** the location of the reserved memory, <strike>or 1 if no such block of memory is available</strike>
;:**UNDER DEVELOPMENT; DO NOT USE**
;:
SET B, [env.heap+2] ;make B the length of the blocks
DIV A, B ;make A the number of blocks needed

SET B, env.heap+4 ;make B the location of the map
SET C, [B]
;NEED TO FIND CONSECUTIVE OPEN BLOCKS
 ;;
;;;;;;;;;;;;;;;;;;
; KeyboardDaemon ;
;;;;;;;;;;;;;;;;;;
;:KeyboardDaemon should be invoked by the interrupt handler whenever a keypress is detected. It has a number of variables that must be set at compile time, but those important for ASCII input should be set per keyboard session.
;:


:v.kd.modeflag DAT 0
:v.kd.writePointer DAT 0
:v.kd.effect DAT 0
:v.kd.enterPointer DAT 0

;:### kd.setup (A=, B=mode, C=effect, I=writePointer, J=enterPointer)
;:
:kd.setup
SET [v.kd.modeflag], B
SET [v.kd.effect], C
SET [v.kd.writePointer], I
SET [v.kd.enterPointer], J
SET PC, POP

;:### kd.handle
;:This subroutine should be called by an interrupt triggered by a keypress.
;:
:kd.handle
HWI [HW.GenericKeyboard]

;;;;;;;;;;;;;;;;;;;;;;;;;
; Monitor Preallocation ;
;;;;;;;;;;;;;;;;;;;;;;;;;
;:# Monitor Preallocation
;:Functions as a reserved spot for the font and video RAM of the LEM1802.
;:

;:### fontRAM
;:Contains the default font shown [here](http://github.com/cubeOS/cubeOS-alpha/raw/master/font/defaultFont.png).
;:

:fontRAM
DAT 0xb79e, 0x388e, 0x722c, 0x75f4, 0x19bb, 0x7f8f, 0x85f9, 0xb158, 0x242e, 0x2400, 0x082a, 0x0800, 0x0008, 0x0000, 0x0808, 0x0808, 0x00ff, 0x0000, 0x00f8, 0x0808, 0x08f8, 0x0000, 0x080f, 0x0000, 0x000f, 0x0808, 0x00ff, 0x0808, 0x08f8, 0x0808, 0x08ff, 0x0000, 0x080f, 0x0808, 0x08ff, 0x0808, 0x6633, 0x99cc, 0x9933, 0x66cc, 0xfef8, 0xe080, 0x7f1f, 0x0701, 0x0107, 0x1f7f, 0x80e0, 0xf8fe, 0x5500, 0xaa00, 0x55aa, 0x55aa, 0xffaa, 0xff55, 0x0f0f, 0x0f0f, 0xf0f0, 0xf0f0, 0x0000, 0xffff, 0xffff, 0x0000, 0xffff, 0xffff, 0x0000, 0x0000, 0x005f, 0x0000, 0x0300, 0x0300, 0x3e14, 0x3e00, 0x266b, 0x3200, 0x611c, 0x4300, 0x3629, 0x7650, 0x0002, 0x0100, 0x1c22, 0x4100, 0x4122, 0x1c00, 0x1408, 0x1400, 0x081c, 0x0800, 0xC020, 0x0000, 0x0808, 0x0800, 0x0040, 0x0000, 0x601c, 0x0300, 0x3e49, 0x3e00, 0x427f, 0xC000, 0x6259, 0x4600, 0x2249, 0x3600, 0x0f08, 0x7f00, 0x2745, 0x3900, 0x3e49, 0x3200, 0x6119, 0x0700, 0x3649, 0x3600, 0x2649, 0x3e00, 0x0024, 0x0000, 0xC024, 0x0000, 0x0814, 0x2200, 0x1414, 0x1400, 0x2214, 0x0800, 0x0259, 0x0600, 0x3e59, 0x5e00, 0x7e09, 0x7e00, 0x7f49, 0x3600, 0x3e41, 0x2200, 0x7f41, 0x3e00, 0x7f49, 0x4100, 0x7f09, 0x0100, 0x3e41, 0x7a00, 0x7f08, 0x7f00, 0x417f, 0x4100, 0x2040, 0x3f00, 0x7f08, 0x7700, 0x7f40, 0xC000, 0x7f06, 0x7f00, 0x7f01, 0x7e00, 0x3e41, 0x3e00, 0x7f09, 0x0600, 0x3e61, 0x7e00, 0x7f09, 0x7600, 0x2649, 0x3200, 0x017f, 0x0100, 0x3f40, 0x7f00, 0x1f60, 0x1f00, 0x7f30, 0x7f00, 0x7708, 0x7700, 0x0778, 0x0700, 0x7149, 0x4700, 0x007f, 0x4100, 0x031c, 0x6000, 0x417f, 0x0000, 0x0201, 0x0200, 0x8080, 0x8000, 0x0001, 0x0200, 0x2454, 0x7800, 0x7f44, 0x3800, 0x3844, 0x2800, 0x3844, 0x7f00, 0x3854, 0x5800, 0x087e, 0x0900, 0x4854, 0x3c00, 0x7f04, 0x7800, 0x047d, 0x0000, 0x2040, 0x3d00, 0x7f10, 0x6c00, 0x017f, 0x0000, 0x7c18, 0x7c00, 0x7c04, 0x7800, 0x3844, 0x3800, 0x7c14, 0x0800, 0x0814, 0x7c00, 0x7c04, 0x0800, 0x4854, 0x2400, 0x043e, 0x4400, 0x3c40, 0x7c00, 0x1c60, 0x1c00, 0x7c30, 0x7c00, 0x6c10, 0x6c00, 0x4c50, 0x3c00, 0x6454, 0x4c00, 0x0836, 0x4100, 0x0077, 0x0000, 0x4136, 0x0800, 0x0201, 0x0201, 0x0205, 0x0200


;:### videoRAM
;:Contains the cubeOS logo/splash screen, shown [here](https://github.com/cubeOS/cubeOS-alpha/raw/master/logo/cubeOSLogo.png).
;:
:videoRAM
DAT 0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0
DAT 0,0,0xF01F,0xF01B,  0xF01B,0xF01B,0xF01B,0xF01B,  0xF01B,0xF01B,0xF01B,0xF01B,  0xF01B,0xF01B,0xF01B,0xF01B,  0xF01B,0xF01B,0xF01B,0xF01B,  0xF01B,0xF01B,0xF01B,0xF01B,  0xF01B,0xF01B,0xF01B,0xF01B, 0xF01B, 0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0xF057,0xF065,0,0,  0,0,0,0, 0,0,0,0,  0,0,0,0,  0,0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0,0xC01C,0xC01C,0,  0,0xC01C,0xC01C,0,  0,0,0,0,  0,0,0,0,  0,0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0xC01D,0xC01F,0xC01F,0xC01F,  0xC01F,0xC01F,0xC01F,0xC01E,  0,0,0,0,  0,0,0,0,  0,0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0,0xC01F,0x0C43,0x0C55,  0x0C42,0x0C45,0xC01F,0,  0,0,0,0,  0,0,0,0,  0,0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0,0,0xC01F,0xC01F,  0xC01F,0xC01F,0,0,  0,0,0,0,  0,0,0,0,  0,0xF01F, 0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0,0,0,0xC01B,  0xC01B,0,0,0,  0,0,0,0,  0,0,0,0,  0,0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0xF053,0xF063,0xF069,0xF065,  0xF06E,0xF063,0xF065,0,  0,0,0,0,  0,0,0,0, 0,0xF01F,0,0
DAT 0,0,0xF01F,0,  0,0,0,0, 0,0,0,0,  0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0,0,0, 0,0xF01F,0,0
DAT 0,0,0xF01F,0xF01C,  0xF01C,0xF01C,0xF01C,0xF01C,  0xF01C,0xF01C,0xF01C,0xF01C,  0xF01C,0xF01C,0xF01C,0xF01C,  0xF01C,0xF01C,0xF01C,0xF01C,  0xF01C,0xF01C,0xF01C,0xF01C,  0xF01C,0xF01C,0xF01C,0xF01C,  0xF01C,0xF01F,0,0
DAT 0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0
 ;
 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PACKAGE ; Dash Package Handler ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:v.tableLen DAT 0 ;number of commands in the tables

;:### p.init
;:Initializes all of the pre-defined packages and their respective commands so that they can be accessed in a table.
;:**Currently unstable.**
;:
:p.init
SET A, p.hashTable
SET B, 128
SET C, 0
JSR dl.makeHashTable

;>
;LOAD CALLS BELOW ARE ADDED BY HAND. THEY SHOULD BE INSERTED PROGRAMMATICALLY DURING PRE-PROCESSING

;SET A, package.nocmd
;JSR p.loadPackage

SET A, package.ls
JSR p.loadPackage

SET A, package.inferno
JSR p.loadPackage

;SET A, package.etype ;by NOTENCORE
;JSR p.loadPackage

SET PC, POP
 ;
 
;:### p.loadPackage (pointer)
;:Loads a package by adding the *identifier*'s crp.dsHash value and a pointer to the first instruction to the hash table. See Packages for more details.
;:
;:**returns** <strike>0 if successful,</strike> 1 if invalid package format
;:
:p.loadPackage
IFN [A], 0xffab ;ONLY CHECKS FIRST WORD
  IFN [A+1], 0xcdff
    SET PC, exf ;fail if not invalid header

ADD A, 2

SET B, A

:p.loadPackage.findNullinIdentifier
ADD B, 1
IFN [B], 0
  SET PC, p.loadPackage.findNullinIdentifier

SET PUSH, B ;store the location of the null before instructions
SUB B, A ;make B the length of the identifier
;A is the start of the identifier

JSR crp.dsHash

;A is now the dsHash of the identifier
SET B, POP ;B is a pointer the null
ADD B, 1 ;B is now a pointer to the first instruction
SET C, p.hashTable ;C is a pointer to the hash table
SET PC, dl.hashInsert ;add the package to the table and exit with subroutine
 ;
 
;:### p.lookup (key)
;:Looks up a package in *p.hashTable* with *key*.
;:**returns** a pointer to the main subroutine of the package
;:
;REBOOTS WHEN CANNOT FIND KEY
:p.lookup
SET B, p.hashTable
JSR dl.hashGet ;returns value in A

SET X, A ;for debugging

SET PC, POP
 ;

:p.hashTable
DAT 0, 0, 0, 0

:p.hashTableLookup ;(128)
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

:p.hashTableValue ;(128)
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

;:## Packages
;:Packages are loaded by the DASH Package Handler at boot time. Standard packages are included in the module, and other packages can be loaded by calling p.loadPackage with a pointer to the header of the package.
;:Packages are identified by the magic number `0xffab cdff`, and contain a null-terminated string, the *identifier*. The index after the null in that string is the first instruction of the package.
;:Packages are invoked in the DASH Shell by typing the *identifier*, letter for letter. Packages have by definition one modifier, and can hence have only one entry point. (A package cannot define two new top-level commands.) A package can, however, do its own parsing once it is invoked by reading `stdin`. This allows for such combinations as are seen in `git init`, `git pull`, `git push`, et cetera.
;:

;<

;PACKAGES BELOW ARE INCLUDED BY HAND CURRENTLY. THEY SHOULD BE ADDED PROGRAMMATICALLY DURING PRE-PROCESSING

;:package.nocmd

DAT 0xffab, 0xcdff
DAT 0,0

SET A, package.nocmd.text
SET B, [v.stdout]
SET PC, typ.cCopy

:package.nocmd.text
DAT 0xf03a, 0xf028, 0

;:### package.ls
;:Writes the names all of the links (files and directories) in the current working directory to stdout. **Output is currently somewhat garbled.**
;:

:package.ls

DAT 0xffab, 0xcdff
DAT "ls",0


SET A, package.ls.message
SET B, [v.stdout]
SET PC, typ.cCopy

:package.ls.message DAT 0xF001, "There is no filesystem.", 0

;OLD FUNCTION
SET PUSH, I
SET PUSH, J

;SHOULD NOT ALWAYS LIST ROOT

SET I, [env.fs]
SET I, [I+4] ;I is the start of the first inode now
SET J, [I+2] ;J is the length of the first inode now
ADD J, I ;J is the stop location now
ADD I, 3 ;I is the start of the first link now

SET B, [v.stdout]
SET [B], 0xF001
ADD B, 1

:package.ls.loop ;DOES NOT LIST . PROPERLY
SET A, I
JSR typ.cCopy

SET B, A;SHOULD PUT TAB OR NEWLINE CHARACTER AFTER FILENAME 
ADD I, 16
IFL I, J
  SET PC, package.ls.loop

SET J, POP
SET I, POP
SET PC, POP
 ;
 
:package.inferno


DAT 0xffab, 0xcdff
DAT "inferno",0


SET A, pack.inferno.text
SET B, [v.stdout]
SET PC, typ.cCopy

:pack.inferno.text DAT 0xF001, "Lasciate ogne speranza, voi ch'intrate.", 0
 ;

 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PINKIEPIE ; Interrupt Handler ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;: **PinkiePie Interrupt Handler** is cubeOS's integrated software interrupt handler.
;:


;:## Software Interrupts
;:A software interrupt is called in assembly by `INT a`, where `a` is a "message." Upon executing an interrupt, `PC` and `A` are pushed to the stack and replaced by the value in the register `IA` and the message, respectively. This forces the DCPU to begin executing code at whatever address `IA` was set to beforehand. That code can then exit by doing, after restoring other registers, `RFI 0`, which disables interrupt queueing, pops `A` from the stack, then pops `PC` from the stack. That will allow the DCPU to resume the code it was executing before the interrupt was called.
;:In large operating environments, it makes sense to set `IA` to a constant value at the start of operation, before any interrupts are called. This allows for *interrupt handlers*, which are usually provided by operating systems. The start address of the interrupt handler is placed in `IA`, so it is invoked whenever an interrupt is called. This allows it to handle interrupts consistently, as based on the message.
;:It also allows software not included in the kernal (and therefore not privvy to labels,) to make function calls defined by the interrupt handler. Furthermore, advanced enough interrupt handlers can allow an operating system to support multitasking.
;:

;:## Initialization
;:To initialize PinkiePie, use `pih.init`. Changes to IA can be reset by performing this call again.
;:
;:### pih.init
;:Does `IAS pih` to direct any interrupts to the interrupt handler.
;:
:pih.init
IAS pih
SET PC, POP
 ;
 
;:## Interrupt Handler
;:The interrupt handler is located at the label `pih`. The subroutine `pih.init` makes this the active interrupt handler.
;:PinkiePie's interrupt handling process is as follows.
;:
;:1. Trigger interrupt queueing with `IAQ 1`
;:2. Drops the interrupt and returns with `RFI` if the message is greater than 128.
;:3. Looks up the message in `pih.cmdtable`.
;:4. If the value is `0xFFFF`, then return with `RFI`.
;:5. Push `B` and `C` to the stack, so they will be preserved.
;:6. `JSR` to the value returned by the table.
;:7. Pop `C` and `B` from the stack, and do `RFI`.
;:
;:If the interrupt is actually an API call, (i.e. A call made to the OS with arguments.) then the receiving subroutine must pop arguments from the stack in order to retrieve them. This is necessary, but **be careful**.
;:

;THIS WHOLE THING COULD USE HASHTABLES

:pih
IAQ 1 ;trigger interrupt queueing

IFG A, 128 ;If the message is too great
  RFI 1

SET A, [A+pih.cmdtable]

IFE A, 0xffff
  RFI 1

SET PUSH, B
SET PUSH, C

JSR A

SET C, POP
SET B, POP
RFI 1

;:### Messages
;:Messages 0-63 are reserved for calls reagarding the OS.
;:Messages 64-127 are reserved for programs.


:pih.cmdtable
DAT 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff

:pihExit
SET C, POP
SET B, POP
RFI 0
 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;
; SIMVID ; Video Manager ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

:v.scrnLoc DAT 0
:v.scrnEnd DAT 0
:v.scrnHeight DAT 12
:v.scrnWidth DAT 32

;:### sv.init (videoRAMPointer, fontRAMPointer)
;:Maps the screen's font to *fontRAMPointer* and the screen's video ram to *videoRAMPointer* in that order.
;:
:sv.init

SET PUSH, A
SET A, 1
HWI [HW.LEM1802] ;MEM_MAP_FONT

SET B, POP
SET A, 0
HWI [HW.LEM1802] ;MEM_MAP_SCREEN

SET [v.scrnLoc], B
ADD B, 0x180
SET [v.scrnEnd], B
SET PC, POP
 ;
 
;:### sv.write (inputPointer, outputPointer)
;:Writes ASCII to the screen using special characters to act as directives. (This does not perform preprocessing such as translating normal ASCII into those special characters.) Special characters are as follows.
;:**returns** the location of the null following the written text
;:
;:#### Color `0x01`
;:Substitutes the first nine bits of every word following this with the first nine bits of this word.
;:
;:
;:
:sv.write
SET PUSH, I
SET PUSH, J

SET X, sv.write.v.color

SET I, A
SET J, B
SET [sv.write.v.color], 0xF000 ;default to white on black

:sv.write.loop
SET A, [I]
AND A, 0x007F

IFE A, 0x01
  SET PC, sv.write.s.color

BOR A, [sv.write.v.color]

STI [J], A ;set the destination to the processed source and increment destination pointer and source pointer

IFN [I], 0
  SET PC, sv.write.loop
  
SET [J], [I] ;write the terminating null

SET A, J
SET J, POP
SET I, POP
SET PC, POP

:sv.write.s.color
SET [sv.write.v.color], [I]
AND [sv.write.v.color], 0xFF80 ;first 9 bits
ADD I, 1 ;increment the source, but not the destination
SET PC, sv.write.loop

:sv.write.v.color DAT 0
 ;
 
:sv.clear
SET PUSH, I
SET PUSH, J

SET I, [v.scrnLoc]

:sv.clear.loop
STI [I], 0

IFL I, [v.scrnEnd]
  SET PC, sv.clear.loop

SET J, POP
SET I, POP
SET PC, POP
 ;

:sv.getLoc ; (xOffset, yOffset)
IFL A, [v.scrnWidth]
  IFL B, [v.scrnHeight]
    SET PC, sv.getLoc.loc ;if onscreen, continue
SET PC, exf

:sv.getLoc.loc
MUL B, [v.scrnWidth] ;make yOffset a line index
ADD A, B              ;combine them
ADD A, [v.scrnLoc]    ;make the index an index onscreen
SET PC, POP           ;return in A
 ;

:sv.autoScroll ; () does not modify registers
SET PUSH, X

SET X, [v.scrnEnd]
SUB X, [v.scrnWidth]

IFE [X], 0
  SET PC, sv.autoScroll.ex

SET PUSH, I
SET PUSH, J
SET I, [v.scrnLoc]
SET J, I
ADD J, [v.scrnWidth]

:sv.autoScroll.loop
STI [I], [J]
IFN J, X
  SET PC, sv.autoScroll.loop

SET X, J
:sv.autoScroll.looplast
STI [I], [X]
SET [X], 0
ADD X, 1
IFG X, [v.scrnEnd]
  SET PC, sv.autoScroll.subex
SET PC, sv.autoScroll.looplast

:sv.autoScroll.subex
SET J, POP
SET I, POP

:sv.autoScroll.ex
SET X, POP
SET PC, POP
 ;

:sv.scrollUp
SET PUSH, I
SET PUSH, J

SET I, [v.scrnLoc]
SET J, I
ADD J, [v.scrnWidth]

:sv.scrollUp.loop
STI [I], [J]
IFL J, [v.scrnEnd]
  SET PC, sv.scrollUp.loop

:sv.scrollUp.clearLast
SET I, [v.scrnEnd]
SUB I, [v.scrnWidth]

:sv.scrollUp.clearLast.loop
STI [I], 0
IFL I, [v.scrnEnd]
  SET PC, sv.scrollUp.clearLast.loop

SET J, POP
SET I, POP
SUB I, [v.scrnWidth] ;adjust I for caller, hopefully
SET PC, POP
 ;
 
:sv.getNewLine ; (currentLoc)
SET PUSH, I
SET I, [v.scrnLoc]
JSR sv.autoScroll
SET PC, sv.getNewLine.loop.sub

:sv.getNewLine.loop
ADD I, [v.scrnWidth]

:sv.getNewLine.loop.sub
IFG A, I ;exit successful if line scrnindex >= currentindex
  SET PC, sv.getNewLine.loop

IFE I, [v.scrnEnd]
  SUB I, [v.scrnWidth]

SET A, I
SET I, POP
SET PC, POP
 ;
 ;;
;TYPE.CUNPACK NEEDS TO BE REWRITTEN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TYPER ; Data and String Handler ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;:### typ.cCopy (inputPointer, outputPointer)
;:Copies the null-terminated string at *inputPointer* to *outputPointer*.
;:**returns** the location following the last character of the copy at the *outputPointer* location (?)
;:

:typ.cCopy
SET PUSH, I
SET PUSH, J
SET I, A
SET J, B

:typ.cCopy.loop
IFE [I], 0
  SET PC, typ.cCopy.exit

STI [J], [I]
SET PC, typ.cCopy.loop

:typ.cCopy.exit
SET [J], 0
SET A, J
SET J, POP
SET I, POP
SET PC, POP

;:### typ.cUnpack (inputPointer, outputPointer)
;:Reads a packed (`0b0YYY YYYY 0XXX XXXX`) null-terminated at *inputPointer* and outputs an unpacked (`0b0000 0000 0XXX XXXX`) string at *outputPointer*.
;:

:typ.cUnpack
SET PUSH, I
SET I, A
SET C, B

:typ.cUnpack.loop
IFE [I], 0
  SET PC, typ.cUnpack.exit
  
ADD I, 1
SET PC, typ.cUnpack.loop

:typ.cUnpack.exit
SUB I, A
SET B, I

SET I, POP
SET PC, typ.pUnpack
 ;

;:### typ.pPack (inputLocation, inputLength, outputLocation)
;:Reads an unpacked (`0b0000 0000 0XXX XXXX`) string from *inputLocation* of *inputLength* and outputs a packed (`0b0YYY YYYY 0XXX XXXX`) little-endian style string at *outputLocation*.
;:

:typ.pPack
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET Z, 0x007F
SET I, A
ADD B, A


:typ.pPack.loop
STI X, [I]
AND X, Z
SET [C], X
STI X, [I]
AND X, Z
SHL X, 8
XOR [C], X

ADD C, 1
IFL I, B
  SET PC, typ.pPack.loop

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;

;:### typ.pUnpack (inputPointer, inputLength, outputPoiner)
;:Reads a packed (`0b0YYY YYYY 0XXX XXXX`) in little-endian at *inputPointer* of *inputLength* and outputs an unpacked (`0b0000 0000 0XXX XXXX`) string at *outputPointer*.
;:

:typ.pUnpack
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET I, C
ADD B, A
SET Z, 0x007F
SET Y, 0x7F00

:typ.pUnpack.loop
SET X, [A]
AND X, Z
XOR X, 0xF000
STI [I], X

SET X, [A]
AND X, Y
SHR X, 8
XOR X, 0xF000
STI [I], X

ADD A, 1
IFL A, B
  SET PC, typ.pUnpack.loop

SET A, I ;return in A

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;
 ;;
