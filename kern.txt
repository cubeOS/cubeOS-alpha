;;;;;;;;
; BOOT ;
;;;;;;;;

SET A, 0
JSR hwmount_screen

SET A, bootname
SET B, 15
SET C, 4
SET PUSH, 0xF000
JSR f_dispmin

SET A, bootbar
SET B, 12
SET C, 6
SET PUSH, 0xF000
JSR f_dispmin

SET A, 0x8000
JSR hwmount_screen

;JSR f_init_dash

:load
SET A, 0x80CC
SET C, 0xB000
:load_l1
SET B, 1
JSR f_xor
ADD A, 1
IFG A, 0x80D5
  SET A, 0x80CC
JSR wait
SET PC, load_l1

:wait
SET PUSH, J
SET J, 10000
:wait_l1
SUB J, 1
IFG J, 0
SET PC, wait_l1

SET J, POP
SET PC, POP
 ;

:hang SET PC, hang

:bootname DAT 0x6b38, 0x3800 ;k88
:bootbar DAT 0x2a20, 0x2a20, 0x2a20, 0x2a20, 0x2a00 ;"* * * * *"
 ;;
;;;;;;;
; ENV ;
;;;;;;;
:CWD DAT 0 ;Current Working Directory
:RAM DAT 0 ;Random Access Memory

:SCRN DAT 0 ;Active Screen
 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HARDMAN ; Hardware device    ;
; manager                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:hwmount_screen ; (location)
SET PUSH, X ;preserve for HWQ
SET PUSH, Y
SET PUSH, I
SET PUSH, J

SET PUSH, A ;store location
HWN I
SET J, 0

:hwmount_screen_l1
HWQ J

IFE A, 0xF615
  IFE B, 0x7349
    IFE C, 0x1802
      SET PC, hwmount_screen_e1

ADD J, 1
IFE I, J
  SET PC, hwmount_screen_e2
SET PC, hwmount_screen_l1
:hwmount_screen_e1
SET A, 0
SET B, POP ;retrieve location
HWI J

SET PC, hwmount_screen_e3
:hwmount_screen_e2
SET A, POP ;discard location
SET A, 1 ;exit unsuccessfully

:hwmount_screen_e3

SET J, POP
SET I, POP
SET Y, POP
SET X, POP

SET PC, POP
 ;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DERPVID ; Video Driver       ;
;                              ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:f_display ; (text_location, X_offset, Y_offset, XOR_effect)
SET J, SP

;X_offset is already correct form
MUL C, 32 ;to make Y_offset the correct index
ADD B, C ;to make B index
ADD B, 0x8000 ;put the index onscreen

SET C, [J+1]
JSR f_copy

SET PC, POP
 ;

:f_dispmin ; (text_location, X_offset, Y_offset, XOR_effect)
SET PUSH, B
SET B, 0x0A00
JSR f_unpack

SET A, 0xA00
SET B, POP
SET PC, f_display
 ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; DATAMAN ; Textual and Mathe-   ;
; matical Manager                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:f_clear ; (loc, len)
SET PUSH, I
ADD B, A
:f_clear_l1
IFE A, B
  SET PC, POP

STI [I], 0
SET PC, f_clear_l1
 ;

:f_copy ; (locsrc, loctarg, XOR_effect)
SET PUSH, I
SET PUSH, J

SET I, B ;targ
SET J, A ;src

:f_copy_l1 ;
SET B, I
STI [I], [J]

XOR [B], C

IFN [J], 0
  SET PC, f_copy_l1

SET J, POP
SET I, POP
SET PC, POP
 ;

:f_xor ; (locstart, len, XOR_effect)
ADD B, A ;set end address

:f_xor_l1
XOR [A], C
ADD A, 1
IFG B, A
  SET PC, f_xor_l1
SET PC, POP
 ;


:f_pack ; (locplaintext, locoutput)
SET PUSH, X
SET PUSH, Y
SET PUSH, I

SET I, A

:f_pack_l1
STI X, [I]
AND X, 0x007F
SHL X, 8

STI Y, [I]
AND Y, 0x007F

BOR X, Y      ; combine
SET [B], X    ; store
ADD B, 1

IFC X, 0x007F
  SET PC, f_pack_e2
IFB [I], 0x7F00
  SET PC, f_pack_l1

:f_pack_e1
SET [B], 0

:f_pack_e2

SET I, POP
SET Y, POP
SET X, POP
SET PC, POP
 ;


:f_unpack ; (locpackedtext, locoutput)
SET PUSH, I
SET PUSH, X
SET PUSH, Y

SET I, B

:f_unpack_l1
SET X, 0x7F00
SET Y, 0x007F

AND X, [A] ;get correct seven bits
IFE X, 0 ;exit before writing 0x0000
  SET PC, f_unpack_e1

SHR X, 8
STI [I], X

AND Y, [A] ;get correct seven bits
IFE Y, 0 ;exit before writing 0x0000
  SET PC, f_unpack_e1

STI [I], Y

ADD A, 1

SET PC, f_unpack_l1

:f_unpack_e1

SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;
 ;;
