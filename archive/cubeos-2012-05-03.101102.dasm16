;;;;;;;;
; BOOT ;
;;;;;;;;

JSR s.instance

SET PC, halt

SET A, 8
SET B, 2
JSR sv.getLoc
IFE A, 1
  SET PC, halt
SET PUSH, A

SET C, PEEK
SET A, packedCol0
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol1
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol2
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol3
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol4
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol5
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol6
SET B, 4
JSR p.uCol

SET C, POP
ADD C, 32
SET PUSH, C
SET A, packedCol7
SET B, 4
JSR p.uCol

SET A, 13
SET B, 5
JSR sv.getLoc
IFE A, 1
  SET PC, halt

SET C, A
SET A, pTitle
SET B, 3
JSR p.uStr

SET PC, halt

:packedCol0 DAT 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF
:packedCol1 DAT 0xF1F1, 0x1111, 0x1111, 0x1F1F
:packedCol2 DAT 0xFF11, 0x1441, 0x1441, 0x11FF
:packedCol3 DAT 0xF111, 0x4444, 0x4444, 0x111F
:packedCol4 DAT 0xF111, 0x1444, 0x4441, 0x111F
:packedCol5 DAT 0xFF11, 0x1144, 0x4411, 0x11FF
:packedCol6 DAT 0xF1F1, 0x1114, 0x4111, 0x1F1F
:packedCol7 DAT 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF

:pTitle DAT 0x7563, 0x6562, 0x534f

:halt SET PC, halt
 ;;
:exf ; EXitFalse
SET A, 0
SET PC, POP
 ;
 ;;
;;;;;;;
; ENV ;
;;;;;;;
:env.cwds DAT 0
 ;;
;;;;;;;;;;;;;;;;
; DASH ; Shell ;
;;;;;;;;;;;;;;;;

:v.sPrompt DAT 0x2024
:v.promptLoc DAT 0

:v.stdin DAT 0xA00
:v.stdout DAT 0xB00

:s.instance ;SHOULD PREPARE SDIN and SDOUT
SET [env.cwds], 0x202F

SET A, [v.scrnLoc]

:s.instance.promptLoop
JSR s.takeIn
SET PC, s.instance.promptLoop

SET PC, POP
 ;

:s.takeIn ; (cursorLoc) ;SHOULD PUSH AND POP I
SET PUSH, I
SET I, 0

JSR s.drawPrompt

SET A, 1 ;HWI parameter

:s.takeIn.loop
IFL I, [v.promptLoc]
  SET I, [v.promptLoc]
SET [I], 0xF09D

:s.takeIn.wait
HWI 1 ;KEYBOARD HARDWARE DEVICE

IFG C, 0x1f
  IFL C, 0x80
    SET PC, s.takeIn.write

IFE C, 0x10
  SET PC, s.takeIn.backspace

IFE C, 0x11
  SET PC, s.takeIn.enter
SET PC, s.takeIn.wait

:s.takeIn.write
XOR C, 0xF000
STI [I], C
SET PC, s.takeIn.loop

:s.takeIn.backspace
STD [I], 0
SET [I], 0
SET PC, s.takeIn.loop

:s.takeIn.enter
SET [I], 0
SET A, [v.promptLoc]
SET B, I
JSR s.stdin

SET A, I;return location in A
SET I, POP
SET PC, POP
 ;

:s.drawPrompt ; (loc)

JSR sv.getNewLine

SET C, A
SET A, env.cwds
SET B, 1
JSR p.uStr

SET C, A
SET A, v.sPrompt
SET B, 1
JSR p.uStr

SET [v.promptLoc], A

SET PC, POP
 ;

:s.stdin ; (startLoc, stopLoc) ;NEED TO CALL THIS SUBROUTINE
SET PUSH, I
SET I, A
SET C, [v.stdin]

:s.stdin.loop
STI [C], [I]
AND [C], 0x007F
ADD C, 1

IFN I, B
  SET PC, s.stdin.loop

SET [C], 0
SET I, POP
SET PC, POP
 ;

:s.stdout ; (stdoutlen, scrnLoc) ;NEED TO WRITE AND CALL THIS
SET PUSH, A
SET A, B
JSR sv.getNewLine
SET A, C ;output
SET B, POP ;length
SET A, [v.stdout] ;location

 ;
 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PACKER ; Data Compressor ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:p.uCol ; (packedCol, packedLen, outputChar)
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET I, C
ADD B, A
SET Y, 0

:p.uCol.selNibble

SET X, 0xF000
SHR X, Y
ADD Y, 4
AND X, [A]

:p.uCol.shift
IFB X, 0x0F00
  SET PC, p.uCol.makeWord
SHL X, 4
XOR X, EX
SET PC, p.uCol.shift

:p.uCol.makeWord
XOR X, 0x20
STI [I], X

IFL Y, 16 ;if should continue with this word
  SET PC, p.uCol.selNibble
;else, go to next word or exit
SET Y, 0
ADD A, 1

IFN A, B ;
  SET PC, p.uCol.selNibble

SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;

:p.pStr ; (fullStringLoc, fullStringLen, packedOut)
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET Z, 0x007F
SET I, A
ADD B, A


:p.pStr.loop
STI X, [I]
AND X, Z
SET [C], X
STI X, [I]
AND X, Z
SHL X, 8
XOR [C], x

ADD C, 1
IFL I, B
  SET PC, p.pStr.loop

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;

:p.uStr ; (packedStringLoc, packedStringLen, packedOut)
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET I, C
ADD B, A
SET Z, 0x007F
SET Y, 0x7F00

:p.uStr.loop
SET X, [A]
AND X, Z
XOR X, 0xF000
STI [I], X

SET X, [A]
AND X, Y
SHR X, 8
XOR X, 0xF000
STI [I], X

ADD A, 1
IFL A, B
  SET PC, p.uStr.loop

SET A, I ;return in A

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;
 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;
; SIMVID ; Video Manager ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

:v.scrnLoc DAT 0x8000
:v.scrnEnd DAT 0x8180
:v.scrnHeight DAT 12
:v.scrnWidth DAT 32

:sv.getLoc ; (xOffset, yOffset)
IFL A, [v.scrnWidth]
  IFL B, [v.scrnHeight]
    SET PC, sv.getLoc.loc ;if onscreen, continue
SET PC, exf

:sv.getLoc.loc
MUL B, [v.scrnWidth] ;make yOffset a line index
ADD A, B              ;combine them
ADD A, [v.scrnLoc]    ;make the index an index onscreen
SET PC, POP           ;return in A
 ;

:sv.getNewLine ; (currentLoc)
SET PUSH, I
SET I, [v.scrnLoc]
SET PC, sv.getNewLine.loop.sub

:sv.getNewLine.loop
ADD I, [v.scrnWidth]

:sv.getNewLine.loop.sub
IFG A, I ;exit successful if line scrnindex >= currentindex
  SET PC, sv.getNewLine.loop

SET A, I
SET I, POP
SET PC, POP
 ;
 ;;
