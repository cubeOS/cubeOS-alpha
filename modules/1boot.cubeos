;;;;;;;;
; BOOT ;
;;;;;;;;
;:# BOOT Loader
;:Initializes the kernel on startup
;:

;:## __BOOT
;:Invokes the boot loader
;:
;:1. Invoke *sv.init* to mount the screen at *videoRAM*.
;:2. Invoke *cat.mountSystem* to initialize the file system with arguments `0x8000, 0x810, 128`.
;:3. Invoke *p.init* to initialize the Dash Package Handler
;:4. Invoke *s.instance* to intialize the DASH Shell
;:
:__BOOT

;SHOULD MAP FONT

SET A, videoRAM
JSR sv.init ;set up boot screen and screen

SET A, 0x8000
SET B, 0x810
SET C, 128

JSR cat.mountSystem ;initialize FS

SET [0xB00], 0xF03A
SET [0xB01], 0xF029 ;":)" in stdout

JSR p.init ;initialize DPH

JSR s.instance ;initialize DASH Shell

SET PC, halt

:pTitle DAT 0x7563, 0x6562, 0x534f

:halt SUB PC, 1
 ;

;:## ext
;:Exits a subroutine with A set to 0 (`TRUE`)
;:To use, do `SET PC, ext` instead of `SET PC, POP` at the end of a subroutine
;:
:ext ; exit true
SET A, 0
SET PC, POP
 ;

;:## exf
;:Exits a subroutine with A set to 1 (`FALSE`)
;:To use, do `SET PC, exf` instead of `SET PC, POP` at the end of a subroutine
;:
:exf ; exit false
SET A, 1
SET PC, POP
 ;
 ;;
 
