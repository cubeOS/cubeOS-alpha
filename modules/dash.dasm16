;;;;;;;;;;;;;;;;
; DASH ; Shell ;
;;;;;;;;;;;;;;;;
;:The DASH Shell is essential to cubeOS's function. It acts as an interpreter for ASCII commands, <strike>which are passed to the package manager in order to directly execute subroutines,</strike> and also handles keyboard input.
;:
;:## Usage
;:At the prompt, the user can use an attached Generic Keyboard to input ASCII and control characters. 
;:
;:## Control Characters
;:
;:### Control + Delete
;:Restarts the DASH Shell by calling *s.instance*.
;:
;:## Subroutines

:v.sPrompt DAT 0xa001, "$", 0xf001, " ", 0

:dash.processMemory

:v.promptLoc DAT v.promptLoc - dash.processMemory
;offset to literal prompt location


:v.args DAT v.args - dash.processMemory
;offset of pointer  


:v.argc DAT v.argc - dash.processMemory
;offset to literal argc


:v.stdin DAT v.stdin - dash.processMemory
;offset to pointer to stdin


:v.stdout DAT v.stdout - dash.processMemory
;offset to pointer to stdout


:s.stdin.quoteflag DAT s.stdin.quoteflag - dash.processMemory
;offset to literal; is 1 if iterator is inside quotes

;:### s.instance
;:Prepares a new terminal session at the root directory.
;:
:s.instance
SET PUSH, Z ;for memory location storage

JSR tusk.newProcess
SET Z, A

JSR dview.newScreen ;get screen location
SET PUSH, A         ;store it

SET A, 0x80
JSR tusk.getMem
SET [Z+v.stdin], A ;store the pointer in memory + v.stdin offset

SET A, 0x80
JSR tusk.getMem
SET [Z+v.stdout], A ;store the poitner in memory + v.stdout offset

SET A, POP ;restore screen location
:s.instance.promptLoop
JSR s.takeIn
SET PUSH, A ;keep track of cursor location

JSR s.parse

SET A, POP ;restore cursor location for passing to s.stdout
JSR s.stdout

SET PC, s.instance.promptLoop

SET PC, POP
 ;
 
;:### s.takeIn (cursorPointer)
;:Writes a prompt to the screen using *v.sPrompt* and enters a loop to take ASCII input from the keyboard and write it to the screen at *cursorPointer*. It exits when the user presses `enter`.
;:
;:**returns** the cursor location on exit
;:
:s.takeIn
                   ;A is the screen output pointer
SET B, v.sPrompt   ;make B the location of the prompt
SET C, [Z+v.stdin] ;make C the raw output location
JSR dview.prompt   ;write a prompt to the screen, put the output in stdout

SET C, A ;make C the location after the user prompt

SET A, 0
SET B, 0
JSR dview.getLoc ;get the screen location of the current screen

SUB C, A      ;make C a hypothetical screen index
AND C, 0xffe0 ;make the X coordinate 0
ADD C, 32     ;increase the Y coordinate by 1
ADD A, C      ;make A the actual screen index

SET PC, POP
 ;

;:### s.parse
;:This subroutine isolates the first argument in *v.stdin* by scanning through, then stopping on null or 0x20. Then, it gets the *crp.sum* of the string. Then, it calls *p.lookup*, sets `B` to the location of stdin, and invokes the subroutine returned by *p.lookup*.
;:
:s.parse
SET A, [Z+v.stdout] ;prepare stdout
SET [A], 0          ;by nullifying the first word

SET A, [Z+v.stdin] ;make both A and B the location of stdin
SET B, A         ;for length-finding later

:s.parse.getFirstArg
IFC [B], 0x20 ;if [B] is 0x0000 or 0x0020
  SET PC, s.parse.exit
ADD B, 1
SET PC, s.parse.getFirstArg

:s.parse.exit
SUB B, A ;make B the length of the first argument
JSR crp.sum ;returns the hashvalue in A

JSR p.lookup

SET PUSH, I
SET PUSH, J
SET PUSH, X
SET PUSH, Y
SET PUSH, Z
IAG B
SET PUSH, B ;push IA

SET X, A ;jump to X
SET A, [v.argc]   ;argc
SET B, v.args     ;pointer to argv
SET C, [Z+v.stdout] ;output location

JSR X ;calls the subroutine returned by *p.lookup*

IAS POP
SET Z, POP
SET Y, POP
SET X, POP
SET J, POP
SET I, POP

;SET A, 0
;SET B, [v.scrnLoc]
;HWI [HW.LEM1802]

SET PC, POP
 ;

;:### s.stdin (startPointer)
;:Performs a C-style copy from *startPointer* to *v.stdin*, replacing un-(single)quoted spaces with zeros.
;:
:s.stdin
SET PUSH, I
SET PUSH, J
SET PUSH, X
SET [Z+v.argc], 1 ;set argc to 1 (including the zeroth argument)
SET I, A
SET X, 1 ;the argument indexing index ($1, $2)
SET B, [Z+v.stdin]

SET [v.args], B ;handle $0 separately

:s.stdin.loop
STI [B], [I]
AND [B], 0x007F

IFE [B], 0x27 ;single quote
  XOR [Z+s.stdin.quoteflag], 1 ;flip state
  
IFN [Z+s.stdin.quoteflag], 1 ;unless they're quoted
  IFE [B], 0x20 ;set spaces
    JSR s.stdin.newarg

ADD B, 1

IFN [I], 0
  SET PC, s.stdin.loop

SET [B], 0
IFL X, 15
  SET [v.args + J], 0 ;zero the pointer following the last argument
SET X, POP
SET J, POP
SET I, POP
SET PC, POP

:s.stdin.newarg
ADD [Z+v.argc], 1
SET [B], 0
SET C, B
ADD C, 1
IFL X, 15
  SET [v.args + X], C
ADD X, 1
SET PC, POP

;:### s.stdout (outputPointer)
;:Does a C-style copy from *v.stdout* to *outputPointer*.
:s.stdout
;change A to the next new line

                    ;A is the output pointer
SET B, [Z+v.stdout] ;input
SET PC, dview.write ;process to screen (null-terminated)
SUB PC, 1 ;debug
 ;
;;RESERVED SPACE

;for keeping track of where arguments are


:v.cwd ;current working directory sector number
DAT 0
:v.cwds ;current working directory in ascii
DAT 0x202f, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
 ;;
