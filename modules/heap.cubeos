;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HEAPMAN ; Heap Manager   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# Heap Manager
;:

;:### heap.init
;:(location, length, blocksize)
;:heap.init reserves a 4 word header followed by a bit map of all blocks. The size of the bit map is (*maxlength*/*blocksize*)/16. *length* is actually the length of the heap, excluding the header and bit map.
;:
;:The header consists of a magic word, **0x9ea9**, the location of the first block in memory, the size of each block, and the maximum length of the heap.
;:
;:**This subroutine clears all of the space given to it.**
;:
;:**returns** location of header
;:

:heap.init
SET PUSH, I
SET PUSH, J
SET PUSH, X

SET [env.heap], A

SET I, A
SET PUSH, A
SET A, B

DIV A, C
SET X, A ;store the number of blocks
SHR A, 4 ;divide by 16 and round down

ADD A, PEEK
ADD A, 4 ;make A the location of the start of the first block

STI [I], 0x9EA9	;0
STI [I], A
STI [I], C
STI [I], B

SET PUSH, B
SET PUSH, A

:heap.init.map
SET A, 0xFFFF
SHR A, X
STI [I], A

IFL X, 16
  SET PC, heap.init.map.exit

SUB X, 16
IFN X, 0
  SET PC, heap.init.map

:heap.init.map.exit

SET A, POP
SET I, A
ADD I, POP ;create ending location

:heap.init.loop ;clear backwards
IFE I, A
  SET PC, heap.init.exit
STD [I], 0
SET PC, heap.init.loop

:heap.init.exit
SET A, POP
SET X, POP
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### heap.alloc (length)
;:Reserves the first consecutive *length* of memory in the heap.
;:
;:**returns** the location of the reserved memory, <strike>or 1 if no such block of memory is available</strike>
;:**UNDER DEVELOPMENT; DO NOT USE**
;:
:heap.alloc
SET PUSH, X
SET PUSH, I
SET PUSH, J

SET X, [env.heap] ;make X the heap location

SET B, [X+2] ;make B the block length
DIV A, B ;make A the number of blocks needed
IFN EX, 0
  ADD A, 1 ;round up
SET I, A ;make I the iterator for number of blocks needed

SET B, X ;make B the location of the header
ADD B, 4 ;add the length of the header to make B the location of the bitmap

SET A, [B] ;make A the first word of the usagemap
SET Y, B ;debug

SET PUSH, I ;store iterator for easy access
SET J, 0 ;make J the iterator to keep track of the bit number

:heap.alloc.checkbits

IFE J, 16 ;if the last bit in the word has been scanned
  SET PC, heap.alloc.newword

IFC A, 0x8000 ;if the leftmost bit of A is 0,
  SET PC, heap.alloc.openbit

;if it's 1, note the closed bit
SET I, PEEK ;reset the iterator
SHL A, 1
ADD J, 1 ;increase bit iterator
SET PC, heap.alloc.checkbits

:heap.alloc.newword ;go to the next word
ADD B, 1 ;increase the pointer by 1

;SHOULD DETECT THE END OF THE BLOCK MAP

SET A, [B]
SET J, 0
SET PC, heap.alloc.checkbits

:heap.alloc.openbit
SUB I, 1
SHL A, 1
ADD J, 1 ;increase bit iterator

IFN I, 0 ;if the iterator has not reached zero, continue
  SET PC, heap.alloc.checkbits

SET C, X ;set C to the location of the header
ADD C, 4 ;set C to the location of the bitmap

SUB B, C ;set B to the number of full words passed
SHL B, 4 ;set B to the number of bits passed (MUL 16)

SUB J, POP ;subtract the number of needed blocks from the
           ;bit iterator to get the first index of the open area

ADD B, J ;add the index of the first block in the open area
         ;in order to get the actual first block index

SET A, B ;debug output

SET J, POP
SET I, POP
SET X, POP
SET PC, POP
 ;


 ;;
