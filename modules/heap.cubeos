;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HEAPMAN ; Heap Manager   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# Heap Manager
;:

;:### heap.init
;:(location, length, blocksize)
;:heap.init reserves a 4 word header followed by a bit map of all blocks. The size of the bit map is (*maxlength*/*blocksize*)/16. *length* is actually the length of the heap, excluding the header and bit map.
;:
;:The header consists of a magic word, **0x9ea9**, the location of the first block in memory, the size of each block, and the maximum length of the heap.
;:
;:**This subroutine clears all of the space given to it.**
;:
;:**returns** location of header
;:

:heap.init
SET PUSH, I
SET PUSH, J
SET PUSH, X

SET [env.heap], A

SET I, A
SET PUSH, A
SET A, B

DIV A, C
SET X, A ;store the number of blocks
DIV A, 16 ;OPTIMIZE WITH SHR

ADD A, PEEK
ADD A, 4 ;make A the location of the start of the first block

STI [I], 0x9EA9	;0
STI [I], A
STI [I], C
STI [I], B

SET PUSH, B
SET PUSH, A

:heap.init.map
SET A, 0xFFFF
SHR A, X
STI [I], A

SUB X, 16
IFN X, 0
  SET PC, heap.init.map

SET A, POP
SET I, A
ADD I, POP ;create ending location

:heap.init.loop ;clear backwards
IFE I, A
  SET PC, heap.init.exit
STD [I], 0
SET PC, heap.init.loop

:heap.init.exit
SET A, POP
SET X, POP
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### heap.alloc (length)
;:Reserves the first consecutive *length* of memory in the heap.
;:
;:**returns** the location of the reserved memory, <strike>or 1 if no such block of memory is available</strike>
;:**UNDER DEVELOPMENT; DO NOT USE**
;:
SET B, [env.heap+2] ;make B the length of the blocks
DIV A, B ;make A the number of blocks needed

SET B, env.heap+4 ;make B the location of the map
SET C, [B]
;NEED TO FIND CONSECUTIVE OPEN BLOCKS
 ;;
