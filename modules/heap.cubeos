;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HEAPMAN ; Heap Manager   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# Heap Manager
:heap.loc DAT 0
:heap.header DAT 0


;:### heap.init
;:(location, maxlength, blocksize)
;:heap.init reserves a 4 word header followed by a bit map of all blocks. The size of the bit map is (*maxlength*/*blocksize* - *number of blocks taken up by the header and map*).
;:
;:The header consists of a magic word, **0x9ea9**, the location of the first block in memory, the size of each block, and the maximum length of the heap.
;:

;BROKEN IF THE HEADER AND MAP TAKE UP MORE THAN ONE BLOCK

:heap.init
SET PUSH, I
SET I, A
SET A, PUSH
SET A, B

DIV A, C
SUB A, 1 ;SHOULD SUBTRACT THE NUMBER OF BLOCKS THE HEADER AND MAP TAKE UP
DIV A, 16 ;OPTIMIZE WITH SHR

ADD A, POP
ADD A, 4 ;make A the location of the start of the first block

STI [I], 0x9EA9	;0
STI [I], A
STI [I], C
STI [I], B


ADD C, A ;create ending location
SET A, I ;have another iterator

:heap.init.loop
ADD A, B
SET [I], A

ADD I, B
IFL I, C
  SET PC, heap.init.loop

;:**STILL IN DEVELOPMENT; DO NOT USE**
 ;
 ;;
