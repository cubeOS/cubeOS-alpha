;;;;;;;;;;;;;;;;;;
; KeyboardDaemon ;
;;;;;;;;;;;;;;;;;;
;:An instance of KeyboardDemon should be registered to any process that requires detection of keypresses. It requests an interrupt value from the operating system, and, when it detects that interrupt, writes the pressed key, if it is ASCII, to the location registered on its instantiation. (That location is, of course, incremented.)
;:
;:## The Handler
;:All keyboards using KeyboardDaemon are given unique interrupt messages, all of which point *kd.keystroke*. 
;:
:kd.keystroke.int
                       ;when a .int enters, X is the interrupt message
SET B, X               ;word to find
SET A, [kd.daemonlist] ;pointer
JSR typ.ffw            ;find the word with this interrupt message,
                       ;to identify the calling keyboard

ADD A, [kd.daemonlist] ;make A a memory location rather than a length

SUB A, 1     ;make A a pointer to the port number
SET B, [A]   ;make B the port number
SET A, [A+2] ;make A the configuration location

SET PUSH, A
SET A, 1 ;get ASCII key in C
HWI B ;interrupt the port that triggered the interrupt

SET A, POP

IFE C, [A+3] ;if C is the exit character
  IFN [A+2], 0 ;if the notify location is not empty
    JSR [A+2] ;jump to "notify" location

IFG C, 0x1f ;if the key is an ASCII key
  SET PC, kd.keystroke.writeChar

IFE C, 0x10 ;backspace
  JSR kd.keystroke.backspace

SET PC, POP
 ;return from the interrupt

:kd.keystroke.writeChar
SET B, [A+5] ;max onscreen position
IFE B, 0 ;if there is no max position specified
  SET B, 0xffff ;make B the highest possible value (no pointer)

IFL [A+1], B ;if the screen location is less than the maximum
  SET PC, kd.keystroke.continue ;then continue

SET PC, POP ;otherwise, return

:kd.keystroke.continue
SET PUSH, Y ;we're going to use Y to colorize 

SET B, [A] ;set B to the direct write location
SET [B], C ;write the ASCII key
ADD [A], 1 ;increase the pointer

SET B, [A+1]      ;set B to the screen write location
SET Y, [B+0xffff] ;set Y to the character before the screen write location
AND Y, 0xff80     ;make Y consist of only the effect characters

SET [B], C ;write C onscreen
BOR [B], Y ;colorize the onscreen character

ADD [A+1], 1 ;increase the onscreen write pointer

SET Y, POP
SET PC, POP
 ;

;:## Data Structures
;:
;:### Daemon Instance List
;:
;:``` 
;: +---------+
;: |  Port0  | <- (in heap) location, stored in kd.daemonlist
;: |  Msg 0  |
;: | OptLoc0 |
;: |  Port1  |
;: |  Msg 1  |
;: | OptLoc1 |
;: |   ...   |
;: +---------+
;:```
;:
;:*Portx* refers to a Generic Keyboard port, and the *OptLocx* following directly after refers to the current "options" selection, which contains all of the information necessary to support a single keyboard (and integrates with dview.)
;:
;:### Option Block
;:
;:```
;: +----------------+
;: |  Direct Write  | <- the location at which to write the raw ascii
;: |  Screen Write  | <- the location at which to write the colorized ascii
;: | Notify On Exit | <- jumped to when "Exit Key" is pressed
;: |    Exit Key    |
;: |  Min-Position  | <- if 0, there is no minimum-position (onscreen)
;: |  Max-Position  | <- if 0, there is no maximum-position (onscreen)
;: |   Char Color   |
;: |    Reserved    |
;: |      ....      | <- Total length is 16 words
;: +----------------+
;:```
;:

:kd.daemonlist
DAT 0 ;memory location containing three memory locations per keyboard device

:kd.length
DAT 0 ;number of literal words in the daemon list

;:### kd.init (slots)
;:Initializes the keyboard handler with enough room for *slots* many Generic Keyboard devices.
;:
:kd.init
MUL A, 3 ;multiply by 3, because each keyboard has 3 words associated with it
SET [kd.length], A
JSR heap.alloc ;
SET [kd.daemonlist], A
SET PC, POP
 ;

;:### kd.newKeyboard (GenericKeyboard)
;:Defines a new keyboard in the first open memory location carried by *kd.daemonlist*, as defined *kd.init*, or adds a new one if it doesn't exist.
;:
;:**returns** a pointer to the *GenericKeyboard*'s OptLoc word
;:
:kd.newKeyboard
SET B, [kd.daemonlist]
SET C, [kd.length]

ADD C, B ;make C the ending location of the list

:kd.newKeyboard.findexisting
IFE [B], A ;if the port exists
  SET PC, kd.newKeyboard.found

ADD B, 2
IFL B, C ;C will point to the very last OptLoc, so we use IFL to be safe
  SET PC, kd.newKeyboard.findexisting

SET PUSH, A ;save the port
SET A, [kd.daemonlist] ;make A the location to search
JSR typ.ffz ;find the first zero
ADD A, [kd.daemonlist] ;typ.ffz adds the list

;SHOULD IMPOSE CHECK

SET C, A ;need to use C instead, here, so A isn't lost

SET [C], POP ;add the new port
SET PUSH, C

SET A, kd.keystroke.int ;make the location to jump to the keystroke handler
JSR pih.newMsg ;make A a new interrupt message
SET C, POP

SET [C+1], A ;store the new message
SET [C+2], 0 ;set the next word to 0, just in case

SET B, A ;put the message in B for the hardware call

SET A, 3    ;hardware call to enable interrupts with message in B
HWI [C]  ;interrupt the GenericKeyboard port

SET A, C ;set A to C, because we changed it earlier
;then continue as if we'd found the value

:kd.newKeyboard.found
ADD A, 2     ;add two to A, because we return the location of the OptLoc
SET PC, POP


