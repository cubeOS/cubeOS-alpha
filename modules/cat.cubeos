;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CAT ; CAT FileSystem         ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# CAT
;:**CAT** is the default file system for cubeOS. It is based on the [Harry's Allocation Table](https://github.com/0x10cStandardsCommittee/0x10c-Standards/blob/master/FS/Draft_Harrys_Allocation_Table.txt) file system format.
;:
;:In order to act on a file or directory, it must be "opened." This copies the inode's contents to a temporary position (as provided by the program opening it.) Some of the subroutines below act on opened directories, so as to add links. When one is finished with a directory or file, one must "write" it back into its strip.
;:
;:

;:## High-level Commands
;:The high-level commands provide a smooth interface with the filesystem that can be used easily by modules and the rest of the operating system.
;:

;:### cat.newFile (currentSector, pathPointer, type)
;:Creates a new, empty file of *type* at *pathPointer*. Type can be either 1, for directory, or 0, for file.
;:
;:**assumes there is open space at 0xa000**
;:**currently only supports making files in the current directory**
;:
;:**returns** the sector number of the new file
;:
:cat.newFile
SET PUSH, A
SET PUSH, B

JSR cat.getOpenSector ;only modifies A

SET B, C
SET C, PICK 1
JSR cat.newInode

SET C, POP ;restore filename pointer
SET B, A ;target inode
SET A, PEEK ;peek current directory

SET PUSH, C ;store filename pointer
SET PUSH, B ;store target inode

SET B, 0xa000
JSR cat.open

SET A, 0xa000
SET B, POP
SET C, POP
JSR cat.newLink

SET A, 0xa000
SET B, POP ;restore current directory
SET PC, cat.write

;:### cat.getSector (currentSector, pathPointer)
;:Uses lower-level subroutines to parse either relative or absolute paths.
;:
;:**assumes there is open space at 0xa000**
;:
;:**returns** the start sector of the given file (via *pathPointer*,) or `0xffff` if it doesn't exist
;:
:cat.getSector
IFE [B], 0x2f ;if the first character in the path is "/"
  SET PC, cat.getSector.useAbs

:cat.getSector.call
SET C, B
SET B, 0xa000 ;THIS SHOULD NOT BE A STATIC VALUE, BUT RATHER IN THE HEAP
SET PC, cat.getSectorFromRelative

:cat.getSector.useAbs
SET A, 0 ;use the root directory as the starting point
ADD B, 1

IFE [B], 0 ;if "/" was the only character in the path
  SET PC, POP ;exit with sector number set to 0

SET PC, cat.getSector.call
 ;

;:## Low-level Commands
;:The low-level commands are used by the high level commands to provide fast and efficient access to the framework of the filesystem itself.
;:

;:### cat.mountSystem (location, length, sectorSize)
;:Mounts */* directory at *location*, reserving *length* words after it. It then initializes a cat filesystem with the given *sectorSize*.
;:
;:**returns** location of first word in header
;:

:cat.mountSystem
SET [env.fs], A

SET PUSH, I
SET PUSH, J
SET PUSH, X
SET PUSH, A ;store location for retrieval at the end
SET I, A
DIV B, C ;make B the maximum number of sectors

:cat.mountSystem.initHeader
STI [I], 0xC001 ;magic number, cat v1.0
STI [I], B ;number of sectors
STI [I], 0 ;reserved for sector map start
STI [I], 0 ;reserved for sector joins start
STI [I], 0 ;reserved for sector start
STI [I], C ;sector size
STI [I], 0 ;sectors in use

:cat.mountSystem.initSectorMap
SET [A+2], I ;sector map start
SET PUSH, B ;store B
SET C, B ;we will change B later
SHR C, 4 ;find number of words needed to represent sector use states
ADD C, I ;C becomes sector map end location

:cat.mountSystem.initSectorMap.loop
SET X, 0xFFFF ;make X initializer for sector map
SHR X, B ;set only the excess bits to used
STI [I], X

IFG X, 0 ;exit if that was enough bits to represent all sectors
  SET PC, cat.mountSystem.initSectorMap.end

SUB B, 16
SET PC, cat.mountSystem.initSectorMap.loop ;COULD BE REORDERED MORE EFFICIENTLY

:cat.mountSystem.initSectorMap.end
SET B, POP ;restore number of sectors

:cat.mountSystem.initSectorJoin
SET [A+3], I ;sector join start
ADD B, I ;make B the ending location of sector join

:cat.mountSystem.initSectorJoin.loop
STI [I], 0
IFN I, B ;continue reserving until I reaches the end location
  SET PC, cat.mountSystem.initSectorJoin.loop

:cat.mountSystem.initSectors
SET [A+4], I

:cat.mountSystem.initializeRoot
SET A, 0
SET B, 1
SET C, 0
JSR cat.newInode

:cat.mountSystem.exit
SET A, POP ;return location

SET X, POP
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### cat.open (stripStartSector, continuousMemoryLocation)
;:Obeying sector joins, copies the entire file or directory (including inode) specified by *stripStartSector* to *continuousMemoryLocation*.
;:
:cat.open
SET PUSH, I
SET PUSH, A

JSR cat.getSectorPointer ;only modifies A
SET I, [A+3] ;set I to the content length
ADD I, 4 ;add the inode length

SET A, POP

:cat.open.loop
SET PUSH, A ;store A for looping

JSR cat.getJoinedSector

IFE A, 0
  SET PC, cat.open.exit

SET C, [env.fs]
SET C, [C+5]

SUB I, C ;subtract from the total length
;rather than subtracting every time, one could do MOD and use the remainder for copying the very end of the strip

JSR cat.getSectorPointer ;only modifies A; get literal memory location

JSR typ.pCopy ;copy the sector
SET B, A ;put the copy continue location in B

SET A, POP
JSR cat.getJoinedSector
SET PC, cat.open.loop

:cat.open.exit
SET A, POP
JSR cat.getSectorPointer

SET C, I
JSR typ.pCopy

SET I, POP
SET PC, POP
 ;

;:### cat.write (inputPointer, sectorNumber)
;:Obeying sector joins, copies the entire contents of an open file at *inputPointer* to the sector at *sectorNumber*, linking new sectors as needed and unlinking old ones if they become unnecessary.
;:
:cat.write
SET PUSH, I
SET PUSH, J
SET PUSH, X

SET J, [env.fs]
SET J, [J+5] ;set C to the size of a sector

SET I, [A+3] ;set A to the size of the input
ADD I, 4 ;include the size of the inode

SET PUSH, I ;store the size of the input for later

DIV I, J ;set I to the number of sectors needed for the whole file
IFN EX, 0
  ADD I, 1 ;round up

SET X, A ;make X the storage place for the current input index

:cat.write.loop
IFE I, 1
  SET PC, cat.write.exit

SET PUSH, B ;store the current sector number

SET A, B
JSR cat.getSectorPointer ;get the location of the sector in memory
SET B, A


SET A, X ;set A to the location for input in the copy
SET C, J 
JSR typ.pCopy ;returns the output location

ADD X, J ;make X the location of the remaining part of the file
SUB I, 1 ;reduce the number of remaining sectors to copy by 1

SET A, POP ;restore the number of the sector that was just written to
JSR cat.linkNewSector ;link a new sector if one is not already linked

SET B, A ;set B to the next sector to write to

SET PC, cat.write.loop

:cat.write.exit
SET C, POP ;restore the size of the input
MOD C, J ;make C the leftover size

SET A, B
JSR cat.getSectorPointer
SET B, A

SET A, X
JSR typ.pCopy

SET X, POP
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### cat.linkNewSector (sectorNumber)
;:If **sectorNumber** does not link to another sector, link the first open sector to it.
;:
;:**modifies** A <br />
;:**returns** the sector number joined
;:
:cat.linkNewSector
SET PUSH, B
SET B, [env.fs]
SET B, [B+3]

ADD B, A
IFN [B], 0 ;if the sector is already linked, just return with that value.
  SET PC, cat.linkNewSector.exit

;if it's not already linked, do the following

JSR cat.getOpenSector ;modifies A; get the first open sector from the bitmap
JSR cat.markSectorUsed ;returns the sector; mark that sector used

SET [B], A ;link the new sector

:cat.linkNewSector.exit
SET A, [B]
SET B, POP
SET PC, POP
 ;

;:### cat.getJoinedSector (sectorNumber)
;:**modifies** A <br />
;:**returns** the sector joined to *sectorNumber*, or **0** if unjoined or unused
;:
:cat.getJoinedSector
SET PUSH, B
SET B, [env.fs] ;sector joins start
SET B, [B+3]
ADD B, A
SET A, [B]
SET B, POP
SET PC, POP
 ;

;:### cat.getOpenSector ()
;:Finds the first open sector in the filesystem. **Does not detect when the system is full.**
;:
;:**modifies** A
;:**returns** sector number
;:
:cat.getOpenSector
SET PUSH, B
SET PUSH, C
SET PUSH, I

SET A, [env.fs]
SET B, [A+2] ;starting location
;SET C, [A+3] ;ending location

:cat.getOpenSector.wordloop
SET A, [B]
SET C, 0x8000 ;0b1000 0000 0000 0000

:cat.getOpenSector.bitloop
IFC C, A ;if C & A == 0
  SET PC, cat.getOpenSector.exit

ADD I, 1

IFE C, 0x0001 ;0b0000 0000 0000 0001
  SET PC, cat.getOpenSector.nextWord ;get the next word in the map

SHR C, 1
SET PC, cat.getOpenSector.bitloop

:cat.getOpenSector.nextWord
ADD B, 1
SET PC, cat.getOpenSector.wordloop

:cat.getOpenSector.exit
SET A, I

SET I, POP
SET C, POP
SET B, POP
SET PC, POP
 ;

;:### cat.getSectorPointer (sector)
;:**modifies** A
;:**returns** a pointer to the location of the given sector in memory
;:
:cat.getSectorPointer
SET PUSH, B
SET B, [env.fs]
MUL A, [B+5] ;multiply by sector size
ADD A, [B+4] ;add sector offset
SET B, POP
SET PC, POP
 ;

;:### cat.newInode (sector, type, parentSector)
;:Creates a new inode of *type* and length 0 at *sector*. It also marks the corresponding sector in sector map as used.
;:Types are 0, for unused, 1, for directory, and 2, for file.
;:
;:**modifies** A, B <br />
;:**returns** the sector of the inode

:cat.newInode
SET PUSH, C
SET PUSH, A ;store A for returning
JSR cat.getSectorPointer ;make A a pointer to the start of that sector

SET [A], B
SET [A+1], C ;the parent sector of the inode
SET [A+2], 0 ;reserved high order word content size
SET [A+3], 0 ;low order word content size

SET A, PEEK
SHR A, 4 ;divide by 16

SET B, [env.fs]
SET B, [B+2] ;set B to the location of the sector map

ADD B, A ;set B to the location of the relavent word of the sector map

SET A, PEEK
AND A, 0x000f ;set A to the index of the relevant bit

SET C, 0x8000 ;0b1000 0000 0000 0000
SHR C, A ;make the relevant bit of C 1

BOR [B], C ;set the relevant bit of B to 1

SET A, POP
SET C, POP
SET PC, POP
 ;

;:### cat.rmInode (sector)
;:Marks *sector* unused in the sector map, unlinks the rest of the strip, and marks its inode unused.
;:
;:**modifies** A <br />
;:**returns** *sector*
;:
:cat.rmInode
SET PUSH, C
SET PUSH, B
SET PUSH, A ;store A for returning

JSR cat.getSectorPointer ;get the sector in memory
SET [A], 0 ;mark the inode unused
SET [A+3], 0 ;set the content length to zero

SET A, PEEK
JSR cat.freeStrip

SET A, POP
SET B, POP
SET C, POP
SET PC, POP
 ;

;:### cat.freeStrip (startSector)
;:Unlinks all of the sectors in a strip and marks them each as free
;:
:cat.freeStrip
SET C, [env.fs]
SET C, [C+3] ;set I to the sector joins start

:cat.freeStrip.loop
SET B, C
ADD B, A ;set B to the location of the sector's join

JSR cat.markSectorUnused ;marks the sector unused in the bitmap
;without changing registers

IFE [B], 0
  SET PC, POP

SET A, [B]
SET [B], 0
SET PC, cat.freeStrip.loop
 ;

;:### cat.markSectorUsed (sector)
;:Marks a sector used in the bitmap.
;:
;:**modifies** A <br />
;:**returns** *sector*
;:
:cat.markSectorUsed
SET PUSH, C
SET PUSH, B
SET PUSH, A ;store for reusage

SHR A, 4 ;divide by 16

SET B, [env.fs]
SET B, [B+2] ;set B to the location of the sector map

ADD B, A ;set B to the location of the relavent word of the sector map

SET A, PEEK
AND A, 0x000f ;set A to the index of the relevant bit

SET C, 0x8000 ;0b1000 0000 0000 0000
SHR C, A ;make the relevant bit of C 1

BOR [B], C ;set the relevant bit of B to 0
SET A, POP
SET B, POP
SET C, POP
SET PC, POP
 ;

;:### cat.markSectorUnused (sector)
;:Marks a sector unused in the bitmap.
;:
;:**modifies** A <br />
;:**returns** *sector*
;:
:cat.markSectorUnused
SET PUSH, C
SET PUSH, B
SET PUSH, A ;store for reusage

SHR A, 4 ;divide by 16

SET B, [env.fs]
SET B, [B+2] ;set B to the location of the sector map

ADD B, A ;set B to the location of the relavent word of the sector map

SET A, PEEK
AND A, 0x000f ;set A to the index of the relevant bit

SET C, 0x8000 ;0b1000 0000 0000 0000
SHR C, A ;make the relevant bit of C 1
XOR C, 0xffff ;negate C, so the relevant bit is 0

AND [B], C ;set the relevant bit of B to 0
SET A, POP
SET B, POP
SET C, POP
SET PC, POP
 ;


;:### cat.newLink (directoryPointer, targetStripStartSector, namePointer)
;:Creates a new link under the given open file, extending the length of the inode automatically.
;:The first word is the *targetStripStartSector*, and the remaining fifteen words are copied literally <strike>(maximum length fourteen)</strike> from the null-terminated word at *namePointer*.
;:**returns** 0 if successful, and 1 if the given sector does not contain a directory
;:
:cat.newLink
IFN [A], 1 ;if the sector does not contain a directory
  SET PC, exf ;exit false

SET PUSH, A ;store A for later

ADD A, [A+3] ;add the length of the existing links
ADD A, 4 ;add the length of the inode

SET [A], B ;set the link target
ADD A, 1
SET B, A ;B is now the location to copy to

SET A, C
JSR typ.ffz ;find the first 0 (only modifies A)

;IF LENGTH IS GREATER THAN CAN BE SUPPORTED, DISCARD THE OTHER VALUES AND EXIT FALSE

SET PUSH, C ;store C
SET PUSH, B ;store B


SET B, A ;B is the length argument
SET A, C ;A is the location argument

JSR crp.sum ;get the checksum of the string

SET B, POP ;restore output location
SET [B], A ;set the second word in the link to the checksum
ADD B, 1 ;increment location fittingly

SET A, POP
JSR typ.cCopy ;SHOULD IMPOSE MAXIMUM LENGTH

SET A, POP
ADD [A+3], 16 ;add the length of the link (always 16) to the length of the inode
SET PC, ext ;exit successful
 ;

;:## Low-Level Parsing Commands
;:

;:### cat.getSectorFromRelative (currentSector, spaceForOpenFile, relativePath)
;:
;:
:cat.getSectorFromRelative
SET PUSH, I
SET PUSH, J

SET I, C

SET PUSH, A ;store A

SET A, C
JSR typ.ffz ;modifies A

SET J, A ;make J the length
ADD J, C ;make J the ending location for the path

IFN [J+0xffff], 0x2f ;if the character before the ending location is not "/"
  SET PC, cat.getSectorFromRelative.sepArgs ;skip the next little bit

SUB J, 1 ;reduce the ending location by 1
SET [J], 0 ;set the "/" to 0

:cat.getSectorFromRelative.sepArgs
IFE [C], 0x2f ;if the current character is a slash
  SET [C], 0 ;set it to 0

ADD C, 1
IFN C, J
  SET PC, cat.getSectorFromRelative.sepArgs

SET A, POP ;restore A
SET PUSH, B ;for recurring usage

:cat.getSectorFromRelative.recurse
 ;A will be the sector to read from
SET B, PEEK

JSR cat.open

SET B, I
SET A, PEEK ;restore memory location
JSR cat.getSectorFromSingleRelative

IFE A, 0xffff
  SET PC, cat.getSectorFromRelative.found

SET PUSH, A

SET A, I
JSR typ.ffz ;get first zero ;only modifies A
ADD A, I ;make a location, not a length
SET I, A

SET A, POP

IFE I, J
  SET PC, cat.getSectorFromRelative.found
ADD I, 1 ;go to beginning of next word

SET PC, cat.getSectorFromRelative.recurse

:cat.getSectorFromRelative.found

SET C, POP
SET J, POP
SET I, POP
SET PC, POP


;:### cat.getSectorFromSingleRelative (currentOpenDirectoryPointer, relativePath)
;:Gets the sector pointed to by the link in *currentOpenDirectoryPointer* by *relativePath*. This is **not recursive**. *relativePath* is considered terminated by a slash null.
;:
;:**returns** the target sector if found, or `0xffff` if not
;:
:cat.getSectorFromSingleRelative

IFE [B], 0x2e
  IFE [B+1], 0
    SET PC, cat.getSectorFromSingleRelative.returnCurrent

IFE [B], 0x2e
  IFE [B+1], 0x2e
    SET PC, cat.getSectorFromSingleRelative.returnParent

SET PUSH, A ;store A
SET PUSH, B ;store B

SET A, B
JSR typ.ffz ;get the length of the relative path

SET B, A
SET A, POP
JSR crp.sum ;get the sum of the relative path

SET B, A ;set B to the sum

SET A, POP ;restore the directory pointer
SET C, [A+3] ;make C the content length
ADD A, 5 ;make A the location of the first link's sum

:cat.getSectorFromSingleRelative.loop
IFE [A], B
  SET PC, cat.getSectorFromSingleRelative.found

ADD A, 16
SUB C, 16
IFA C, 0
  SET PC, cat.getSectorFromSingleRelative.loop

SET A, 0xffff
SET PC, POP

:cat.getSectorFromSingleRelative.found
SET A, [A+0xffff] ;set A to the sector that is pointed to by A-1
SET PC, POP

:cat.getSectorFromSingleRelative.returnCurrent
SET A, [v.cwd]
SET PC, POP

:cat.getSectorFromSingleRelative.returnParent
SET A, [A+1] ;parent sector
SET PC, POP
