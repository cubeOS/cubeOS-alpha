;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TYPER ; Data and String Handler ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;:## p.C.copy (inputPointer, outputPointer)
;:Copies the null-terminated string at *inputPointer* to *outputPointer*.

:p.C.copy
SET PUSH, I
SET PUSH, J
SET I, A
SET J, B

:p.C.copy.loop
IFE [I], 0
  SET PC, p.C.copy.exit

STI [J], [I]
SET PC, p.C.copy.loop

:p.C.copy.exit
SET J, POP
SET I, POP
SET PC, POP

;:## p.pStr (inputLocation, inputLength, outputLocation)
;:Reads an unpacked (`0b0000 0000 0XXX XXXX`) string from *inputLocation* of *inputLength* and outputs a packed (`0b0YYY YYYY 0XXX XXXX`) little-endian style string at *outputLocation*.

:p.pStr
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET Z, 0x007F
SET I, A
ADD B, A


:p.pStr.loop
STI X, [I]
AND X, Z
SET [C], X
STI X, [I]
AND X, Z
SHL X, 8
XOR [C], x

ADD C, 1
IFL I, B
  SET PC, p.pStr.loop

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;

;:## p.uStr (inputPointer, inputLength, outputPoiner)
;:Reads a packed (`0b0YYY YYYY 0XXX XXXX`) in little-endian at *inputPointer* of *inputLength* and outputs an unpacked (`0b0000 0000 0XXX XXXX`) string at *outputPointer*.

:p.uStr
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET I, C
ADD B, A
SET Z, 0x007F
SET Y, 0x7F00

:p.uStr.loop
SET X, [A]
AND X, Z
XOR X, 0xF000
STI [I], X

SET X, [A]
AND X, Y
SHR X, 8
XOR X, 0xF000
STI [I], X

ADD A, 1
IFL A, B
  SET PC, p.uStr.loop

SET A, I ;return in A

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;

;:## p.C.uStr (inputPointer, outputPointer)
;:Reads a packed (`0b0YYY YYYY 0XXX XXXX`) null-terminated at *inputPointer* and outputs an unpacked (`0b0000 0000 0XXX XXXX`) string at *outputPointer*.

:p.C.uStr
SET PUSH, I
SET I, A
SET C, B

:p.C.uStr.loop
IFE [I], 0
  SET PC, p.C.uStr.exit
  
ADD I, 1
SET PC, p.C.uSTR.loop

:p.C.uStr.exit
SUB I, A
SET B, I

SET I, POP
SET PC, p.uStr
 ;
 ;;
