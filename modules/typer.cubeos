;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TYPER ; Data and String Handler ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;:### typ.ffw (pointer, word)
;:**F**inds the **f**irst **w**ord matching *word* after *pointer*, and returns the number of words between *pointer* and that *word*.
;:
;:**modifies** A
;:
:typ.ffw
SET PUSH, A

:typ.ffw.loop
IFE [A], B
  SET PC, typ.ffw.exit

ADD A, 1
SET PC, typ.ffw.loop

:typ.ffw.exit
SUB A, POP
SET PC, POP
 ;

;:### typ.ffz (pointer)
;:**F**inds the **f**irst **z**ero after *pointer*, and returns the number of words between *pointer* and that zero.
;:
;:**modifies** A
;:
:typ.ffz
SET PUSH, B
SET B, 0
JSR typ.ffw ;find first word matching 0
SET B, POP
SET PC, POP

;:### typ.htoascii (hextet, outputPointer)
;:Converts *hextet* (a 16-bit unsigned integer) to ASCII, and writes that ASCII to *outputPointer*. Always produces four ASCII characters.
;:
;:**returns** the location following the last character of the ASCII writing.
;:
:typ.htoascii
SET PUSH, I
SET I, 4 ;counter for how many times to shift the hextet

:typ.htoascii.lookup
SET C, 0xf000
AND C, A
SHR C, 12
SET [B], [typ.htoascii.table + C]

SHL A, 4
SUB I, 1
ADD B, 1

IFN I, 0
  SET PC, typ.htoascii.lookup

SET I, POP
SET A, B
SET PC, POP

:typ.htoascii.table
DAT 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39 ; "0" - "9"
DAT 0x61, 0x62, 0x63, 0x64, 0x65, 0x66 ; "a" - "f"

;:### typ.cCopy (inputPointer, outputPointer)
;:Copies the null-terminated string at *inputPointer* to *outputPointer*.
;:**returns** the location following the last character of the copy at the *outputPointer* location
;:

:typ.cCopy
SET PUSH, I
SET PUSH, J
SET I, A
SET J, B

:typ.cCopy.loop
IFE [I], 0
  SET PC, typ.cCopy.exit

STI [J], [I]
SET PC, typ.cCopy.loop

:typ.cCopy.exit
SET [J], 0
SET A, J
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### typ.pCopy (inputPointer, outputPointer, length)
;:Copies data of *length* from *inputPointer* to *outputPointer*.
;:**returns** a pointer to the word following the last output word
;:
:typ.pCopy
SET PUSH, I
SET PUSH, J

SET I, A
SET J, B
ADD C, A

:typ.pCopy.loop
IFE I, C
  SET PC, typ.pCopy.exit

STI [J], [I]
SET PC, typ.pCopy.loop

:typ.pCopy.exit
SET A, J
SET J, POP
SET I, POP
SET PC, POP
 ;

;:### typ.cUnpack (inputPointer, outputPointer)
;:Reads a packed (`0b0YYY YYYY 0XXX XXXX`) null-terminated at *inputPointer*(A) and outputs an unpacked (`0b0000 0000 0XXX XXXX`) string at *outputPointer*(B).
;:

:typ.cUnpack
SET PUSH, I
SET I, A
SET C, B

:typ.cUnpack.loop
IFE [I], 0
  SET PC, typ.cUnpack.exit
 
set push, [I]
and [I], 0x007F
IFE [I], 0
  SET PC, typ.cUnpack.exit
set [C], [I]
set [I], pop
add c, 1
set push, [I]
shr [I], 8
and [I], 0x007F
IFE [I], 0
  SET PC, typ.cUnpack.exit
set [C], [I]
set [I], pop
ADD I, 1
add C, 1
SET PC, typ.cUnpack.loop

:typ.cUnpack.exit
set [c], 0
SET I, POP
SET PC, pop

;:### typ.pPack (inputLocation, inputLength, outputLocation)
;:Reads an unpacked (`0b0000 0000 0XXX XXXX`) string from *inputLocation* of *inputLength* and outputs a packed (`0b0YYY YYYY 0XXX XXXX`) little-endian style string at *outputLocation*.
;:

:typ.pPack
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET Z, 0x007F
SET I, A
ADD B, A


:typ.pPack.loop
STI X, [I]
AND X, Z
SET [C], X
STI X, [I]
AND X, Z
SHL X, 8
XOR [C], X

ADD C, 1
IFL I, B
  SET PC, typ.pPack.loop

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;

;:### typ.pUnpack (inputPointer, inputLength, outputPoiner)
;:Reads a packed (`0b0YYY YYYY 0XXX XXXX`) in little-endian at *inputPointer* of *inputLength* and outputs an unpacked (`0b0000 0000 0XXX XXXX`) string at *outputPointer*.
;:

:typ.pUnpack
SET PUSH, I
SET PUSH, X
SET PUSH, Y
SET PUSH, Z

SET I, C
ADD B, A
SET Z, 0x007F
SET Y, 0x7F00

:typ.pUnpack.loop
SET X, [A]
AND X, Z
STI [I], X

SET X, [A]
AND X, Y
SHR X, 8
STI [I], X

ADD A, 1
IFL A, B
  SET PC, typ.pUnpack.loop

SET A, I ;return in A

SET Z, POP
SET Y, POP
SET X, POP
SET I, POP
SET PC, POP
 ;
 ;;
