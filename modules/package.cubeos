;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; PACKAGE ; Dash Package Handler ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:v.tableLen DAT 0 ;number of commands in the tables

;:### p.init
;:Initializes all of the pre-defined packages and their respective commands so that they can be accessed in a table.
;:**Currently unstable.**
;:
:p.init
SET A, p.hashTable
SET B, 128
SET C, 0
JSR dl.makeHashTable

;">loadcalls" is replaced by the calls necessary to load included packages
;>loadcalls

SET PC, POP
 ;
 
;:### p.loadPackage (pointer)
;:Loads a package by adding the *identifier*'s crp.dsHash value and a pointer to the first instruction to the hash table. See Packages for more details.
;:
;:**returns** <strike>0 if successful,</strike> 1 if invalid package format
;:
:p.loadPackage
IFN [A], 0xffab ;ONLY CHECKS FIRST WORD
  IFN [A+1], 0xcdff
    SET PC, exf ;fail if not invalid header

ADD A, 2

SET B, A

:p.loadPackage.findNullinIdentifier
ADD B, 1
IFN [B], 0
  SET PC, p.loadPackage.findNullinIdentifier

SET PUSH, B ;store the location of the null before instructions
SUB B, A ;make B the length of the identifier
;A is the start of the identifier

JSR crp.dsHash

;A is now the dsHash of the identifier
SET B, POP ;B is a pointer the null
ADD B, 1 ;B is now a pointer to the first instruction
SET C, p.hashTable ;C is a pointer to the hash table
SET PC, dl.hashInsert ;add the package to the table and exit with subroutine
 ;
 
;:### p.lookup (key)
;:Looks up a package in *p.hashTable* with *key*.
;:**returns** a pointer to the main subroutine of the package
;:
:p.lookup
SET B, p.hashTable
JSR dl.hashGet ;returns value in A

IFE A, 1 ;If the value is not found,
  SET A, p.nocmd ;print "invalid command" statement

SET PC, POP
 ;

:p.hashTable
DAT 0, 0, 0, 0

:p.hashTableLookup ;(128)
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

:p.hashTableValue ;(128)
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

:p.nocmd
SET A, p.nocmd.text
SET B, [v.stdout]
SET PC, typ.cCopy

:p.nocmd.text
DAT 0x7001, "Invalid command.", 0 ;THIS SHOULD BE PACKED TEXT

;:## Packages
;:Packages are loaded by the DASH Package Handler at boot time. Standard packages are included in the module, and other packages can be loaded by calling p.loadPackage with a pointer to the header of the package.
;:Packages are identified by the magic number `0xffab cdff`, and contain a null-terminated string, the *identifier*. The index after the null in that string is the first instruction of the package.
;:Packages are invoked in the DASH Shell by typing the *identifier*, letter for letter. Packages have by definition one modifier, and can hence have only one entry point. (A package cannot define two new top-level commands.) A package can, however, do its own parsing once it is invoked by reading `stdin`. This allows for such combinations as are seen in `git init`, `git pull`, `git push`, et cetera.
;:

;">packages" is replaced by the contents of package files.
;>packages

 ;;
