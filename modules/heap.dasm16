;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; HEAPMAN ; Heap Manager   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;:# Heap Manager
;:
;:The heap is essentially a linked list of regions. Each region consists of a two-word header (see below) followed by the allocated memory.
;:
;:The header consists of a size for the region (not including the header) and a pointer to the header of the next region (0 for last region).
;:

;:### heap.init
;:(location, length)
;:heap.init reserves a 2-word header. *length* is actually the length of the heap, excluding the header.
;:
;:The header consists of a magic word, **0x9ea9** and the location of the first heap region in memory.
;:
;:**The heap is not zeroed; the contents of newly allocated memory are arbitrary and undefined.**
;:
;:**returns** location of header
;:

:heap.init
SET [env.heap], A
ADD A, 2
SET [env.heap+1], A ; The address of the first region header.
SUB B, 2 ; Subtract the two bytes of the region header.
BOR B, 0x8000 ; Mark it as free.
SET [A], B
SET [A+1], 0 ; No next region.
SET PC, POP


;:### heap.alloc (length)
;:Reserves a consecutive block of *length* words of memory in the heap.
;:
;:Currently a bit dim; uses the first sufficiently large region, not necessarily the best one. This trades increased memory fragmentation for speed.
;:
;:**returns** the location of the reserved memory, or 0 if no block of the requested size could be found.
;:
:heap.alloc
; Walks the pointers with X to find a free region
SET PUSH, C
SET PUSH, X
SET PUSH, Y

SET X, [env.heap+1] ; Retrieve the address of the first region header.

:heap.alloc.search
SET Y, [X]
AND Y, 0x8000 ; Retrieve the free pointer
IFG Y, 0
  SET PC, heap.alloc.found ; START HERE: Need to make sure it's actually big enough!
SET X, [X+1] ; X now points at the next region's header
IFG X, 0
  SET PC, heap.alloc.search

; If we fell through to here, X is 0 and we haven't found a big enough region.
SET A, 0
SET PC, heap.alloc.done

:heap.alloc.found
; At this point, X points at the region header, and Y is junk.
; Write the new length, and set the pointer.
SET Y, [X]
AND Y, 0x7fff ; Just the length itself.
SUB Y, A
SUB Y, 2 ; Y holds the new length of the next, free, region.
SET [X], A ; Store the length of this region.

IFE Y, 0 ; If Y is 0 the new region filled the whole free region exactly, 


:heap.alloc.done
SET Y, POP
SET X, POP
SET C, POP
SET PC, POP
; END OF MY NEW CODE





SET PUSH, X
SET PUSH, I
SET PUSH, J

SET X, [env.heap] ;make X the heap location

SET B, [X+2] ;make B the block length
DIV A, B ;make A the number of blocks needed
IFN EX, 0
  ADD A, 1 ;round up
SET I, A ;make I the iterator for number of blocks needed

SET B, X ;make B the location of the header
ADD B, 4 ;add the length of the header to make B the location of the bitmap

SET A, [B] ;make A the first word of the usagemap

SET PUSH, I ;store iterator for easy access
SET J, 0 ;make J the iterator to keep track of the bit number

:heap.alloc.checkbits

IFE J, 16 ;if the last bit in the word has been scanned
  SET PC, heap.alloc.newword

IFC A, 0x8000 ;if the leftmost bit of A is 0,
  SET PC, heap.alloc.openbit

;if it's 1, note the closed bit
SET I, PEEK ;reset the iterator
SHL A, 1
ADD J, 1 ;increase bit iterator
SET PC, heap.alloc.checkbits

:heap.alloc.newword ;go to the next word
ADD B, 1 ;increase the pointer by 1

;SHOULD DETECT THE END OF THE BLOCK MAP

SET A, [B]
SET J, 0
SET PC, heap.alloc.checkbits

:heap.alloc.openbit
SUB I, 1
SHL A, 1
ADD J, 1 ;increase bit iterator

IFN I, 0 ;if the iterator has not reached zero, continue
  SET PC, heap.alloc.checkbits

SET C, X ;set C to the location of the header
ADD C, 4 ;set C to the location of the bitmap

SUB B, C ;set B to the number of full words passed
SHL B, 4 ;set B to the number of bits passed (MUL 16)

SUB J, PEEK ;subtract the number of needed blocks from the
            ;bit iterator to get the first index of the open area
            ;but keep the number of blocks needed for later

ADD B, J ;add the index of the first block in the open area
         ;in order to get the actual first block index

SET A, B   ;set A to the block index
SET B, POP ;set B to the number of blocks needed
SET C, 1   ;set C to "mark the blocks used"
JSR heap.mark

MUL A, [X+2] ;multiply by the length of each block
ADD A, [X+1] ;add the location of the first block in memory
             ;to produce the location of the first word of the first
             ;reserved block

SET J, POP
SET I, POP
SET X, POP
SET PC, POP
 ;

;:### heap.free (location, length)
;:Marks the blocks specified by *location* and *length* as free, and clears them.
;:
;:**returns** *location*
;:
:heap.free
SET PUSH, B
SET PUSH, A

SET C, [env.heap]

SUB A, [C+1] ;subtract the first block's location from A
DIV A, [C+2] ;divide by the size of a block, to get the
             ;block index, rounding down

;DIV A, [C+2] not coming out evenly (EX != 0) implies corruption
;of some sort. Impose a check here?

DIV B, [C+2] ;make B the number of blocks implied by *length*
IFN EX, 0    ;rounding up, as the allocation subroutine does
  ADD B, 1

SET C, 0 ;"unused"
JSR heap.mark

SET A, POP
SET B, POP
ADD B, A
ADD B, 1
SET C, A

:heap.free.clear
SET [A], 0
ADD A, 1
IFN A, B
SET PC, heap.free.clear

SET PC, POP
 ;

;:### heap.mark (block, number, used/unused)
;:Marks *number* of blocks used or unused, starting from the index *block*. `1` in *used/unused* denotes `used`, and `0` denotes `unused`.
;:
;:**return** *block*
;:
:heap.mark
SET PUSH, A
SET PUSH, X
SET X, [env.heap]
ADD X, 4 ;make X a pointer to the first word in the bitmap

SUB B, 1 ;for use later
SET PUSH, C ;store used/unused type
SET PUSH, B ;store B
SET PUSH, A ;store A

SHR A, 4 ;divide by 16, to get the word index
ADD A, X ;make A a pointer to the relevant word

SET B, POP ;restore the block index
AND B, 0x000f ;get the bit index

SET C, 0x8000 ;set the leftmost bit
ASR C, POP    ;make the leftmost *number* bits 1

SHR C, B ;make C apply to all of the blocks to be reserved

SET B, POP ;restore used/unused
IFE B, 1
  SET PC, heap.mark.used

:heap.mark.unused
XOR C, 0xffff ;flip the bits to reflect what needs to be changed
AND [A], C    ;set the bits that need to be changed to 0

SET X, POP
SET A, POP
SET PC, POP

:heap.mark.used
BOR [A], C ;set the bits that need to be changed to 1

SET X, POP
SET A, POP ;return *blocks*
SET PC, POP
 ;
 ;;
