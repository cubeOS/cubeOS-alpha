;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TASKER ; Process Manager ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:v.tusk.IDiterator DAT 1000 ;the iterator through which to get unique IDs
:v.tusk.runPID DAT 0 ;the ID of the process that is currently running

:v.tusk.PIDloc DAT tusk.PIDs
:v.tusk.memStack DAT 0 ;should be replaced with a file or heapspace
                       ;carrying a bunch of pointers to memstacks

;:### tusk.newProcess
;:Registers a new process of unique ID. <strike>Adds the process id to the table at *v.tusk.PIDloc*.</strike>
;:
;:**modifies** A
;:**returns** a pointer to the first memory for the process's use
;:**under development**
;:
:tusk.newProcess
SET PUSH, B
SET PUSH, C

SET [v.tusk.runPID], [v.tusk.IDiterator] ;change to the new process
ADD [v.tusk.IDiterator], 1 ;increase iterator by 1

SET A, 0x80 ;reserve 128 words, the first 64 for child memory
            ;and the second for the process's actual use
JSR heap.alloc

SET B, A
ADD B, 0x40 ;make B the first index of memory for the process's use
SET PUSH, B

SET B, A
ADD B, 2 ;make B the index after the dview pointer

SET [A], B ;make the first word in the memstack its stack pointer

SET PUSH, A ;store memStack pointer

SET A, [HW.LEM1802]
;JSR dview.init

SET [v.tusk.memStack], POP

SET A, POP ;make A the return value (pointer to memory)
SET C, POP
SET B, POP
SET PC, POP

;:### tusk.getMem (length)
;:Reserves a *length* amount of memory from the heap using *heap.alloc*, and stores *length* and the location of the reserved memory on the "memory stack," which allows that memory to be freed either when the process calls *tusk.free* or when it terminates.
;:
;:**modifies** A
;:**returns** the first location of the reserved memory
;:
:tusk.getMem.int
SET A, PICK 4 ;restore from original interrupt push
JSR tusk.getMem ;run the routine
SET PC, pih.return ;return A
 ;
:tusk.getMem
SET PUSH, B
SET PUSH, C ;for the location the stack pointer is at

SET C, [v.tusk.memStack]
SET C, [C] ;v.tusk.memStack points to the pointer

SET [C], A ;push length to the memstack
ADD C, 1

SET PUSH, C
JSR heap.alloc
SET C, POP

SET [C], A ;push location to the memstack
ADD C, 1

SET B, [v.tusk.memStack]
SET [B], C ;update the stack pointer carrier

SET C, POP
SET B, POP
SET PC, POP



;:### tusk.dropMem ()
;:
;:
;:**does not modify registers**
;:
:tusk.dropMem.int
SET A, PICK 4 ;restore from original interrupt push
JSR tusk.getMem ;run the routine
SET PC, pih.return ;return A
 ;
:tusk.dropMem
SET PUSH, A
SET PUSH, B
SET PUSH, C

SET C, [v.tusk.memStack]
SET C, [C] ;v.tusk.memStack points to a pointer
           ;the pointer is the open space after the current memory, though

SET A, [C+0xffff] ;retreive the location from the stack
SET B, [C+0xfffe] ;retreive the length from the stack

SET PUSH, B

SUB C, 2 ;decrement the stack
SET B, [v.tusk.memStack]
SET [B], C

SET B, POP

JSR heap.free ;location, length

SET C, POP
SET B, POP
SET A, POP
SET PC, POP

:tusk.PIDs ;64 open spaces
DAT 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
