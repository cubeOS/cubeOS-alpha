;;;;;;;;
; BOOT ;
;;;;;;;;
;:# BOOT Loader
;:Initializes the kernel on startup
;:

;:### __BOOT
;:Invokes the boot loader
;:
;:1. Invoke *sv.init* to mount the screen at *videoRAM*.
;:2. Invoke *cat.mountSystem* to initialize the file system with arguments `0x8000, 0x810, 128`.
;:3. Invoke *p.init* to initialize the Dash Package Handler
;:4. Invoke *s.instance* to intialize the DASH Shell
;:
:__BOOT
SET [0], 0x7f81 ;jump to SYSTEM.CRASH instruction if instruction 0 is ever reached

JSR HWM

SET A, 0x2000 ;heap location
SET B, 0x5000 ;length
SET C, 0x0040 ;block size (64)
JSR heap.init

JSR pih.init

SET A, 0x8000
SET B, 0x810
SET C, 128

JSR cat.mountSystem ;initialize FS

JSR p.init ;initialize DPH

;JSR clock.init

JSR s.instance ;spawn an instance of the DASH Shell

SET PC, halt

:pTitle DAT 0x7563, 0x6562, 0x534f

:halt SUB PC, 1
 ;
 
;:### SYSTEM.RESTART
;:Clears all registers, drops interrupt queue
;:**under development**
;:
:SYSTEM.RESTART
SET A, 0
SET B, 0
SET C, 0
SET X, 0
SET Y, 0
SET Z, 0
SET I, 0
SET J, 0
SET SP, 0
IAS 0
SET PC, 0

;:### SYSTEM.CRASH
;:Is jumped to if the instruction at 0 is ever reached. Proceeds to print a crash report screen, and allow the user to restart.
;:
:SYSTEM.CRASH
JSR dview.newScreen ;bind a new screen

SET A, 0 ;x 0
SET B, 0 ;y 0
JSR dview.getLoc ;get location 0

;CRASH REPORT PAGE HERE
SET B, SYSTEM.CRASH.crashreport
JSR dview.write

SUB PC, 1
 ;
:SYSTEM.CRASH.crashreport
DAT "CubeOS has crashed.", 0


;:### ext
;:Exits a subroutine with A set to 0 (`TRUE`)
;:To use, do `SET PC, ext` instead of `SET PC, POP` at the end of a subroutine
;:
:ext ; exit true
SET A, 0
SET PC, POP
 ;

;:### exf
;:Exits a subroutine with A set to 1 (`FALSE`)
;:To use, do `SET PC, exf` instead of `SET PC, POP` at the end of a subroutine
;:
:exf ; exit false
SET A, 1
SET PC, POP
 ;
 ;;
 
