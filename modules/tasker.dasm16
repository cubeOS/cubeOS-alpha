;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; TASKER ; Process Manager ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:v.tusk.processList DAT 0

:v.tusk.IDiterator DAT 1000 ;the iterator through which to get unique IDs

:v.tusk.runPID DAT 0 ;the ID of the process that is currently running
:v.tusk.runMem DAT 0 ;the process block owned by the current process

;:### tusk.init (ProcessSpace)
;:Initializes the TUSK Process manager with enough memory for *ProcessSpace* simultaneous processes.
;:
:tusk.init
SET PUSH, B
SET PUSH, C

SHL A, 1       ;multiply A by 2, because each process needs two words
JSR heap.alloc ;allocate memory

SET [v.tusk.processList], A ;store the location of the process list

SET C, POP
SET B, POP
SET PC, POP
 ;

;:### tusk.newProcess
;:Registers a new process of unique ID. <strike>Adds the process id to the table of existing processes. (TODO)</strike>
;:
;:**modifies** A
;:**returns** 0 <strike>if successful, and 1 if not</strike>
;:**under development**
;:
;:The architecture of a process block is as follows.
;:
;:```
;: +----------------
;: | %d size | usage
;: +----------------
;: | 10 | storing registers
;: | 01 | pointer to windowing system block
;: | 05 | free
;: +----------------
;:```
;:
:tusk.newProcess
SET PUSH, B
SET PUSH, C

SET [v.tusk.runPID], [v.tusk.IDiterator]	;identify this process as the one
					;that is currently running
ADD [v.tusk.IDiterator], 1		;increase iterator by 1

SET A, 16	
JSR heap.alloc

SET [v.tusk.runMem], A	;store a pointer to the process block

SET A, [HW.LEM1802]
JSR dview.init

SET C, POP
SET B, POP
SET PC, POP
