;;;;;;;;;;;;;;;;;;;;;;;;;;
; HWM ; Hardware Manager ;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;:The Hardware Manager is designed to be run to place a layer of abstraction between the software and connected hardware. HWM detects known hardware and maps their port numbers to memory locations, which are accessible through labels.
;:For example, to send a hardware interrupt to a connected LEM1802, one might normally use the command `HWI 0`, or `HWI 1`. This might change between emulators and ingame, however. HWM allows such syntax as `HWI [LEM1802]`.
;:
;:## Supported Hardware
;:*Items marked with an asterisk do not have intialization routines called automatically.
;:- *[Generic Clock](http://dcpu.com/highnerd/rc_1/clock.txt)
:GenericClock DAT 0
;:- *[LEM1802](http://dcpu.com/highnerd/rc_1/lem1802.txt)
:LEM1802 DAT 0
;:
;:
;:## Subroutines
;:

;:### HWM.map
;:Maps the ports of all recognized hardware to specific points in memory, which are accessible through labels. Upon recognizing a piece of hardware, it will map it to a memory location and do an automatic `JSR` to a label of the form `HWinit.x`, where *x* is the name of the hardware recognized in either full form (`HWinit.LEM1802`) or definition camel case (`HWinit.GenericClock`) if the name of the hardware cannot be represented by labels in its full form.
;:
:HWM.map
SET PUSH, I
SET PUSH, J
HWN J

:HWM.map.loop
HWQ I

IFE A, 0xb402
  IFE B, 0x12d0
    IFE C, 1
      SET PC, HWM.map.GenericClock

IFE A, 0xf615
  IFE B, 0x7349
    IFE C, 1
      IFE X, 0x8b36
        IFE Y, 0x1c6c
          SET PC, HWM.map.LEM1802

:HWM.map.loop.exit
ADD I, 1
IFN I, J
  SET PC, HWM.map.loop

SET J, POP
SET I, POP
SET PC, POP
 ;

:HWM.map.LEM1802
SET [LEM1802], I
;JSR HWinit.LEM1802
SET PC, HWM.map.loop.exit

:HWM.map.GenericClock
SET [GenericClock], I
;JSR HWinit.GenericClock
SET PC, HWM.map.loop.exit
